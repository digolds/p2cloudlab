<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>博客 on 2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/blog/</link>
    <description>Recent content in 博客 on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Jul 2018 12:32:37 +0600</lastBuildDate>
    
	<atom:link href="https://2cloudlab.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何规模化企业的数字化服务--Kubernetes的最佳实践</title>
      <link>https://2cloudlab.com/blog/how-to-improve-organization-effect-kubernetes/</link>
      <pubDate>Fri, 20 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-improve-organization-effect-kubernetes/</guid>
      <description>企业的线上产品的发展主要分为3个阶段。第一阶段主要是快速打造产品，然后推向市场并验证想法；第二阶段主要是打磨产品同时发展用户基数，使得用户基数达到千万级别；第三阶段则是维护产品，迭代新功能，保证产品能够为企业带来持续的收入。每一个阶段都会有对应的技术手段来支撑，本文的内容主要解决企业在第二阶段所面临的挑战。这些挑战主要有：企业如何在原来的基础上重构数字化产品？企业如何构建支撑千万级用户的数字化产品？对于后者，企业需要综合多种技术手段来实现，其中Kubernetes（K8S）在容器编排方面为拥有千万级别用户群体的服务提供了支持。接下来，让我们看看K8S是如何规模化数字化产品的。
 Kubernetes所解决的问题 什么是Kubernetes(K8S) 为什么选择K8S K8S的组成部分 K8S的资源类型 在AWS上搭建K8S服务的选项  Kubernetes所解决的问题 当一款数字化产品的用户基数非常庞大的时候（比如每天的访问量达到几千万人次时），企业需要升级其技术解决方案，以便能够支撑庞大的用户群体。拥有庞大用户群体的数字化服务有很多，比如Google的搜索引擎，淘宝，微博等等。而这类数字化服务有一个共同的特征：其后台运行着成成千上万台服务器，由它们向用户提供服务。通过人工来管理这群服务器显然不是一个可行的办法，因此Google的工程师为了高效管理这种量级的服务器，发明了这个工具：Kubernetes（K8S）。通过这个工具，工程师只需要键入几条命令就可以同时操作多台机器，从而实现轻松管理成千上万台服务器。
这些数字化产品大多都是微服务化的，而微服务的几大特点就是：服务与服务之间是相互独立的；它们之间是通过行为来交互的；为了高可用性，每一个服务都会被复制到不同的服务器上，当某台服务器坏了或者死机了，那么运行在其它服务器上的服务依然能够提供服务；不同服务互相协作，最终支撑了数字化产品。K8S特别适合微服务场景，比如工程师只需要执行一个命令就能让K8S部署某类服务，并自动替换失败的服务。除此之外，工程师还可以通过一个命令使得K8S自动部署或更新服务，这些服务能够根据负载的多少而自动增加或减少。为了方便K8S部署，其部署单元被抽象出来，而这种单元就是我们常常见到的容器，其中Docker是一款非常流行的容器工具，因此K8S和Docker工具结合很好地支持微服务结构的数字化产品。
使用K8S能够方便地为数字化产品的负载能力提供横向扩展，那么K8S是如何做到的？接下来我们要了解什么是K8S？它提供了哪些功能？
什么是Kubernetes(K8S) Kubernetes (K8S)是一套管理容器资源的开源系统，它提供了以下功能:
 分配资源  它会根据资源的使用情况(这些资源包括数据中心，服务器，CPU，内存，端口等)，在一族服务器上，以最优的方式，创建和运行容器。
 部署  它支持多种在线逐步更新策略，这些策略有rolling deployment， blue-green deployment以及 canary deployment。如果在更新过程中产生错误，它会自动恢复到上一次可用的状态，从而确保服务7*24小时可用。
 自带修复功能  它会一直监控资源的运行状态，自动将可用的资源替换不可使用的资源。
 弹性伸缩  它支持横向和纵向伸缩。负载增多或减少时，它可以自动增加或减少适度的资源来响应负载。它也可以升级或降级资源的处理能力来支持纵向扩展，比如提高CPU的处理能力或者增加内存。
 负载均衡  它能使外部访问内部资源(常见的资源有container)，并将外部请求均匀地分配给不同的资源。
 发现服务  它有内置的DNS服务，并提供Service资源，使得容器能够找到彼此来进行通信。
 配置和授权  它允许你设置不同的环境变量来区分不同的环境，这些环境有stage、test和prod。也允许你为资源设置不同的访问权限。
为什么选择K8S K8S作为容器化应用的编排系统，已经广泛应用于大多数企业。它之所以流行的原因有以下几点：
 丰富的功能  它为管理容器提供了大量功能，这些功能包括弹性伸缩，自动修复，在线部署，服务发现，秘钥管理，配置管理，bin packing, storage orchestration, batch execution, access controls, log aggregation, SSH access, batch processing, and much more.</description>
    </item>
    
    <item>
      <title>从提出想法-&gt;对外发布产品--如何0成本在github上缩短该过程</title>
      <link>https://2cloudlab.com/blog/how-to-craft-url-shorten-service-for-one-day/</link>
      <pubDate>Thu, 19 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-craft-url-shorten-service-for-one-day/</guid>
      <description>Craft a shorten URL service base on AWS in 1 day With Cloud Computing becoming popular, uniform and standard software development methodologies are arising, meaning that companies can leverage out-of-the-box infrastructures provided by Cloud providers, such as AWS, to craft complex yet competitive software product in order to domain markets in a short time, sometime, even in a day. Here, I will show you how to combine some sort of services provided by AWS, to build a production-grade shorten URL service with high availability, resiliency and maintainability in just one day!</description>
    </item>
    
    <item>
      <title>如何提高企业的研发效率--CI/CD</title>
      <link>https://2cloudlab.com/blog/why-organization-should-practice-cicd/</link>
      <pubDate>Wed, 18 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/why-organization-should-practice-cicd/</guid>
      <description>CI/CD是现代软件研发过程中必不可少的基础设施。类似于福特流水线，它能够帮助企业提高软件的研发效率，提高软件的质量以及对外发布新功能。CI/CD能够帮助企业的研发团队提高研发效率。CI/CD将企业中的所有研发人员，包括研发团队，测试团队，DevOps团队，串联在一起，使得上一个团队的输出都可以顺利地流转到下一个团队。CI/CD能够帮助企业提高软件质量。研发团队借助CI/CD能够快速看到修改产品之后的结果，从而能够及时解决因修改不当而引起的问题；测试团队将UI测试，集成测试接入到CI/CD中，使得软件产品对外发布之前，都有足够的自动化测试来验证其功能。CI/CD能够帮助企业及时对外发布产品的新功能。DevOps团队只需要执行一个命令，就能将研发团队所研发的新功能通过机器自动地部署到生产环境中，有时还能支持线上实时更新！CI/CD分为2部分，它们分别是CI和CD。每个部分都需要借助一些工具和经验来实现，其中&amp;lt;如何0成本在github上构建CI&amp;gt;通过一个例子来构建CI，而本文将围绕CD来展开，包括Continue Test，Continue Monitor，Continue Security，Continue Deployment等。
2cloudlab.com为企业准备产品的运行环境，只需要1天！</description>
    </item>
    
    <item>
      <title>如何0成本在github上构建CI</title>
      <link>https://2cloudlab.com/blog/how-to-setup-ci-service-base-on-github/</link>
      <pubDate>Tue, 17 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-setup-ci-service-base-on-github/</guid>
      <description>现代软件的研发流程基本上均会配备一定程度的CI/CD（这篇文章解释了为何需要在企业里实施CI/CD），整个流程主要分为CI和CD部分，这篇文章将围绕CI部分展开，并通过一个具体的例子解释如何0成本在github上构建CI。构建CI的最佳实践离不开Trunk Based Development的分支策略，感兴趣的读者可以通过这篇文章来了解什么是Trunk Based Development。在github上构建CI有2个好处：无需任何费用和有大量可以用于构建CI的模块，借助这2个好处，小规模团队可以快速地搭建还不错的CI流程。接下来，让我们结合一个使用Go编写的Hello World例子以及基于Trunk-Based Development模式来构建这个CI流程。
这篇文章将分为以下几个部分来讲解：
 在github上构建CI的基本思路 在github上构建CI的优势 通过一个Go示例在github上构建CI 总结  在github上构建CI的基本思路 构建CI有2种方式，一种是组建团队从0开始，另外一种是借助第三方服务开始。在github上构建CI属于后者，其优势在于github提供了许多方便开发者研发的服务，其中有3种服务可用于免费构建CI，它们分别是：免费托管源码，免费存储以及免费构建服务（也就是最近推出的Actions服务）。有了这3种服务，任何一个团队均可以根据自身的情况来构建CI。接下来，我将基于Trunk-Based Development模式提出实践CI的一种方法，这种方法提出了2个独立的流程，并定义了触发这2个流程的条件。
首先，我们需要定义一个流程（master_workflow），这个流程的作用是快速响应master分支上的每一次改动。该分支上每一次改动都会自动启动服务器或虚拟机来执行该流程，并将结果反馈（比如通过邮件通知的方式）给研发团队。这个流程的主要作用在于每天都确保master分支是健康的，比如语法规则是正确的，编译是成功的和单元测试能通过，因此该流程的一大特点是执行周期通常限制在10~30分钟内。这一要求使得构成该流程的步骤尽可能的少，下面是构成该流程的几个步骤：
 准备编译环境 安装依赖库 获取源代码 检测代码的合法性 编译源代码 执行自动化测试（仅仅包括单元测试） 生成测试报告  为了缩短这个流程的执行周期，可以考虑这些方法：将准备编译环境和安装依赖库步骤提前合并成一个步骤（通过Docker技术），无需在运行时准备；将检测代码的合法性和编译源代码步骤分布在不同的机器上同时执行；在执行自动化测试的步骤中并发执行单元测试。缩短这个流程的执行周期是为了让整个团队更快地看到每一次修改的结果，如果这个修改阻碍了团队的工作（比如编译失败了），那么提交该修改的研发工作者能够第一时间修复。
其次，我们还需要定义一个集成流程（integration_workflow），这个流程的作用是将所有组件集成在一个完整的压缩包里，并发布到一个共有的存储空间，以便测试团队和DevOps团队展开后续的测试和部署工作。这个流程不仅包括之前流程所定义的步骤，而且还新增了集成和归档步骤，如下所示：
 准备编译环境 安装依赖库 获取源代码 检测代码的合法性 编译源代码 执行自动化测试（包括单元测试和集成测试） 生成测试报告 集成和归档  **注：**此时，执行自动化测试包括了集成测试。因此，从总体而言，这个流程的运行周期会更长一点，通常在30~60分钟。
以上就是基于Trunk-Based Development模式，在github上构建CI的基本思路。首先，我们需要为master分支定义一个流程，该分支上的每次修改都会触发该流程；其次，我们需要为release分支定义另外一个流程，该分支上的每一次修改都会触发该流程，并将集成包发布到一个共有存储空间。为何需要定义这2个流程，读者可以参考这篇文章。
在github上构建CI的优势 你可以选择组建一支团队来打造CI/CD，这种方式需要自己搭建服务器，安装软件（比如Jenkins）和配置，因此所需时间会较长。另外，你也可以选择第三方服务来搭建CI/CD（比如在github上构建CI）。在github上搭建CI有2个好处，它们分别是免费和共享其他人的成果。
github向开发者提供了3种免费的服务来搭建CI，它们分别是源码托管，归档存储和Actions服务。开发者可以免费地将代码发布到github上，世界各地的开发者可以参与进来共同开发；开发者也可以免费地使用github所提供的Actions服务来构建流程；开发者可以将流程输出的集成包发布到github提供的存储服务里，供用户使用。
这3种服务不仅免费，而且其中Actions服务提供了可复用的模块。这些可复用的模块是由全世界的开发者贡献的，因此可以直接将这些模块组合在一起构成适合自己的CI流程。比如这篇文章的示例使用了Go相关的Actions模块来构建上一节提到的2个流程。
github平台存储了开发者的代码，提供了搭建CI的Action服务，拥有大量可复用的模块以及支持存储，此时，开发者只需要使用这些可复用的模块来定义流程，便可以将代码，Actions服务和存储服务联系在一起。而流程的定义是通过yaml文件来完成的，比如上一节的2个流程就分别对应着文件master_workflow.yaml和integration_workflow.yaml。
组建一个团队来搭建CI，需要准备服务器，安装软件，用网线连接服务器等，而借助github，则只需要编写yaml文件就能快速构建出一个稳定的CI，这种转变大大地缩短了搭建CI的时间，让开发者专注于软件的功能研发！
接下来让我们看一个具体的例子来实践在github上构建CI
通过一个Go示例在github上构建CI 这个例子是由Go语言来编写的，完整的源码可以到这里获取，其目录结构如下所示：
. |____.github | |____workflows | | |____integration_workflow.yaml | | |____master_workflow.yaml |____go.mod |____main.go |____main_integration_test.go |____main_test.go |____Makefile |____mylib | |____external_lib.go | |____external_lib_test.</description>
    </item>
    
    <item>
      <title>如何提高企业的研发效率--trunk-based development</title>
      <link>https://2cloudlab.com/blog/why-organization-should-use-trunk-based-development/</link>
      <pubDate>Mon, 16 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/why-organization-should-use-trunk-based-development/</guid>
      <description>企业的研发团队在研发产品功能时通常会选择2种分支管理策略，它们分别是Feature Branches Development和Trunk-based Development。2种分支管理策略都有它们适用的场景，比如在github上研发开源软件时，经常会使用Feature Branches Development模式，而Google，Facebook，LinkedIn，微软常常会使用Trunk-based Development模式。企业在实施CI（持续集成）时通常需要Trunk-based Development方面的实践，原因在于这种模式能够快速输出集成的结果。本文将围绕Trunk-based Development展开，并提供一些可实施该模式的操作步骤。
 什么是Trunk-based Development？ 团队需要掌握哪些技巧来实践Trunk-based Development？ 为Trunk-Based Development配套CI服务 Trunk-Based Development的实施细节 使用github来实施Trunk-Based Development的基本思路 结论和参考  什么是Trunk-based Development？ Trunk-based Development是指：所有研发人员围绕主分支trunk(也就是github上的master分支)来共同研发，在研发过程中拒绝创建存活时间较长的分支，并使用Feature Toggles和Branch by Abstraction等技术在主分支上逐步发布需要长时间（通常是1周）才能研发完成的功能。官方对Trunk-based Development的概括如下所示：
 A source-control branching model, where developers collaborate on code in a single branch called ‘trunk’ *, resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.</description>
    </item>
    
    <item>
      <title>Terraform、aws-vault和Go实用技巧指南</title>
      <link>https://2cloudlab.com/blog/techniques-for-terraform/</link>
      <pubDate>Sun, 15 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/techniques-for-terraform/</guid>
      <description>Terraform实用技巧 aws-vault实用技巧 Go实用技巧 组合Terraform、aws-vault和Go工具的实用技巧  本文记录了2cloudlab.com在使用Terraform、aws-vault和Go工具所积累的知识和经验。这些知识和经验是在解决某些问题的时候发现的，如果能够将这些知识和经验汇总，也许能够帮助到其他团队。
Terraform实用技巧  aws_launch_configuration资源是无法通过API来修改的  一个aws_launch_configuration实例创建之后，要想修改该实例的属性，则需要重新创建一个新的aws_launch_configuration实例，原因在于aws_launch_configuration类型的实例是无法通过AWS所提供的API来修改的。
Terraform所提供的所有类别的资源都有一个lifecycle的设置  Terraform工具通过这个设置来决定创建资源的行为。比如以下代码通过设置create_before_destroy = true，最终能够使得Terraform先创建一个aws_launch_configuration新的实例，再将新实例替换掉旧实例，替换成功后再销毁旧实例。lifecycle中的设置只能是常量，因此这种方式：create_before_destroy = var.flag来设置create_before_destroy是不允许的。
resource &amp;#34;aws_launch_configuration&amp;#34; &amp;#34;launch_configuration_instance&amp;#34; { image_id = &amp;#34;ami-0fc20dd1da406780b&amp;#34;#ubuntu 18.4 instance_type = &amp;#34;t2.micro&amp;#34; security_groups = [aws_security_group.instance.id] user_data = &amp;lt;&amp;lt;-EOF#!/bin/bash  echo &amp;#34;Hello, 2cloudlab.com&amp;#34; &amp;gt; index.html nohup busybox httpd -f -p ${var.server_port} &amp;amp; EOF# Required when using a launch configuration with an auto scaling group. # https://www.terraform.io/docs/providers/aws/r/launch_configuration.html  lifecycle { create_before_destroy = true } } Go实用技巧  如何使用Go来运行某一个测试用例（比如定义了一个TestIntegrationOrganization测试用例）？  go test -v -run TestIntegrationOrganization 如何根据tag(+build integration)来执行一组测试用例？  // intergration_test.</description>
    </item>
    
    <item>
      <title>如何通过命令行访问AWS服务-最佳实践</title>
      <link>https://2cloudlab.com/blog/how-to-authority-aws-service-command-line/</link>
      <pubDate>Sun, 15 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-authority-aws-service-command-line/</guid>
      <description>使用命令行操作AWS服务之前，需要输入登陆凭证。每一个研发人员会经常使用不同账号的登陆凭证来完成他们的工作，比如在测试账号中进行测试工作，在stage账号中部署测试通过的功能等。在现实的工作中，每个研发人员每天平均会操作AWS服务20～50次，而每次都需要给AWS提供登陆凭证。因此为了提高一个团队的研发效率，需要采用一个能够高效访问AWS服务的方法。本文将对比几种方法，并最终给出一个更加有效的方法来访问AWS。
本文将基于以下几种方法来说明如何在类Unix系统上配置和使用登陆凭证：
 将登陆凭证写入配置文件~/.aws/credentials 将登陆凭证写入环境变量AWS_ACCESS_KEY_ID 和 AWS_SECRET_ACCESS_KEY 借助工具aws-valut来设置登陆凭证 总结  将登陆凭证写入配置文件~/.aws/credentials 通过命令行访问AWS服务之前，你需要获得一对登陆凭证，它们的格式如下：
aws_access_key_id=AKIAIOSFODNN7EXAMPLE aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 将以上登陆凭证写入~/.aws/credentials文件中就可以轻松访问AWS服务（内容如下所示）。这种方式的最大问题是不安全，因为该登陆凭证是以明文的方式存放，而且容易被别人获取。
[default] aws_access_key_id=AKIAIOSFODNN7EXAMPLE aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 既然将登陆凭证存放在磁盘上是不合适的，那么可以通过设置环境变量的方式来解决这类安全问题。
将登陆凭证写入环境变量AWS_ACCESS_KEY_ID 和 AWS_SECRET_ACCESS_KEY 为了不存储登陆凭证，则可以通过写入环境变量的方式来访问AWS服务，如下所示（注意export前的空格）：
echo &amp;#34;Note a space before export command, it will not store used commands in commands history.&amp;#34; export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 以上方式只能在当前运行这些命令的命令行中访问AWS服务，如果该命令行关闭，那么这些环境变量需要重新设置。因此这种方式解决了安全的问题，但是确变得麻烦了。比如我需要打开2个命令行窗口来访问不同的AWS账号。
要想高效访问AWS服务，则应该同时解决以上2个问题。幸运的是，我们可以使用工具：aws-vault来协助我们更好地访问AWS服务。
借助工具aws-valut来设置登陆凭证 aws-valut是一个管理登陆凭证的命令行工具（这篇文章进一步介绍了该工具）。这个工具通过以下方式解决了访问AWS时所遇到问题：
 加密存储登陆凭证 一个命令行同时处理多个登陆凭证 支持所有访问AWS的命令行工具  在使用aws-vault之前，需要设置登陆凭证，比如设置以下2个不同账号的登陆凭证：
aws-vault add slz aws-vault add slz_mfa 比如以下命令使用了slz所对应的凭证并运行aws命令行工具
aws-vault exec slz -- aws iam list-users 以下命令使用了slz_mfa所对应的凭证并运行terraform工具
aws-vault exec slz_mfa -- terraform plan slz和slz_mfa所对应的凭证均以密文的方式存储在磁盘上。通过以上对比，读者应该首先考虑使用aws-vault来访问AWS服务，并考虑在命令行之前加入一个空格来避免命令被记录在历史之中，比如以下示例：</description>
    </item>
    
    <item>
      <title>提高研发团队使用AWS服务的效率x100--高效使用aws-vault工具</title>
      <link>https://2cloudlab.com/blog/how-to-authority-aws-through-command-line/</link>
      <pubDate>Tue, 10 Mar 2020 12:29:40 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-authority-aws-through-command-line/</guid>
      <description>在DevOps的世界里有太多工具需要掌握，命令行工具就是其中之一。企业在打造DevOps的过程中会经常使用命令行工具访问AWS服务。一名研发人员每天可能要在命令行里反复（平均50~60次）输入登录AWS的凭证才能创建资源，如果为每一名账号引入安全机制，那么这个登录流程耗时更长！为了减轻这种重复登录所带来的痛苦，则需要一个更加友好的命令行工具来辅助，这个工具就是：aws-vault。
 什么是aws-vault工具 aws-vault工具的使用指南 总结  什么是aws-vault工具 aws-vault是一个命令行工具，这个工具的主要作用在于帮助研发人员以命令行的方式快速访问AWS服务，最终减轻了每一名研发人员因反复登录而带来的负担，从而提高企业整体的研发效率。
aws-vault是一款用go语言编写且开源的命令行工具，其项目地址在这里。aws-vault主要解决安全和自动设置凭证的问题。
初次运行aws-vault时，只需要在命令行里输入如下指令：
aws-vault add slz 根据提示输入AWS_ACCESS_KEY_ID和AWS_SECRET_ACCESS_KEY信息。如果这个凭证具有操作AWS资源的权限，那么研发人员就能通过aws-vault工具高效访问AWS服务。此外，这2个登录信息是以密文的形式存储的，因此aws-vault进一步保护了登录凭证。如果该用户需要使用MFA，那么只需要在文件~/.aws/config加入以下内容：
# config文件 [profile slz] mfa_serial = arn:aws:iam::120699691161:mfa/Tony aws-vault工具会自动到这个文件中读取该MFA地址，并提示研发人员键入6位安全码。如果研发人员需要用到AWS所提供的role，那么也可以按照类似的方式在该文件中添加以下内容：
# config文件 [profile slz] role_arn = arn:aws:iam::120699691161:role/update_role aws-vault工具会自动读取这个role，并自动获取该role所拥有的权限来访问AWS服务。
设置好以上登录凭证之后，研发人员只需要执行以下命令就能自动访问AWS资源:
aws-vault exec slz -- aws iam list-users 以上命令分两部分：aws-vault exec slz和aws iam list-users。前者会根据slz去找到对应的登录凭证，并自动设置好登录凭证，后者则是使用aws命令行工具列出所有用户信息。后半部分可以是支持AWS凭证登录的任何工具(比如：Terraform工具）。如下例子将aws-vault工具和terraform工具结合在一起使用：
aws-vault exec slz -- terraform apply aws-vault工具的使用指南 完成以上配置之后，接下来看看aws-vault工具如何结合terraform工具使用的。
假设我们使用aws-vault添加了以下具有相同登录凭证，但是不同登录方式的登录选择：
 slz：直接通过登录凭证操作AWS服务 slz_mfa：除了需要登录凭证，还需要输入6位安全码才能操作AWS服务 slz_mfa_role：获取临时登录凭证，并以role的方式访问AWS服务  以下命令说明了如何使用aws-vault工具和terraform plan命令生成资源创建的详细信息:
 以下命令直接通过登录凭证使terraform能够访问AWS服务  aws-vault exec slz -- terraform plan 以下命令与第一种类似，但是在执行访问AWS服务之前需要输入6位安全码  aws-vault exec slz_mfa -- terraform plan 以下命令的登录凭证是临时生成的，所拥有的权限由role来确定，这个role有可能是其它账号的。  aws-vault exec slz_mfa_role -- terraform plan 通过以上命令，研发人员可以快速切换登录场景，并且只需要一行命令就能操作AWS服务。因此对于拥有上百人的研发团队而言，这种便捷能够以100x的系数来提高团队的工作效率！</description>
    </item>
    
    <item>
      <title>让产品7*24小时持续服务于用户--在线更新产品功能</title>
      <link>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</link>
      <pubDate>Sat, 15 Feb 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</guid>
      <description>当企业对外发布产品的新功能时，如何保证原有的功能不受影响，仅替换需要升级的功能？企业无法接受在线服务暂时性停止对外服务。试想想，几十万用户正在使用某个软件产品，突然因为企业的一次功能升级，导致几十万用户无法正常使用，最终造成企业损失。幸运的是，在软件行业，有几种方案可以解决这类问题。
方案一:blue/green deployment。这种方案的思想是维持2套相似的运行环境，其中一个环境运行当前产品，另外一个环境运行带有新功能的产品，一旦带有新功能的产品能够正常工作了，就将用户流量导入新环境， 并保留原来的环境(以免新环境发生严重问题时，可以及时切换到原来稳定的环境上)。这种方案的好处是实施起来简单，而且可以及时恢复到最新的稳定环境上，但是它增加了成本(需要同时运行2套相似的运行环境)，增加了工作量(需要同时管理2套相似的运行环境)。整个过程如下图所示:
方案二: rolling deployment。这种方案的思想是增量替换，先启动新功能，将流量从原有功能导入到新功能上，保持原有功能，直到新功能正常工作才关闭原有功能。持续以上步骤，直到新功能逐一替换掉原有功能。这种方案的好处是无需维护2套资源，降低成本，但是其缺点是增加了实施的复杂度。除此之外，该方案也有局限性，它适用于由大量微服务组成的分布式系统。整个过程如下图所示:
方案三: canary deployment。这种方案在rolling deployment的基础之上加入了一些特性。比如根据用户的特征(国家、性别、年龄等)来确定一小部分群体，并向该群体发布新功能。这种方案进一步增加了实施的复杂性，好处是对外发布时，其作用的范围，粒度更细了。
每种方案都有适用的场景，因此企业需要根据实际情况选择其中一个来解决在线更新产品功能的问题。</description>
    </item>
    
    <item>
      <title>Go编程的奇幻之旅（一）基础知识</title>
      <link>https://2cloudlab.com/blog/how-to-use-go-to-develop-part1/</link>
      <pubDate>Sun, 15 Dec 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-use-go-to-develop-part1/</guid>
      <description>本文将指导你如何准备Go研发环境以及介绍一些基础语法知识。这些内容能够帮助你快速地在企业中应用Go语言所带来的好处。这些好处有：跨平台、丰富的三方库、并发和内置自动化测试功能。本文将按照以下几个方面来介绍Go：
 下载和安装Go 选择IDE Go常用的命令 Go的内置类型 流程控制 并发 错误处理 结构化数据的转化 导入第三方模块 总结  下载和安装Go 在使用Go编程时，首先需要下载和安装Go研发环境。读者可以到其官方网站下载。下载完成之后是安装Go研发环境，假设安装路径为/path/to/go。
安装完成之后需要配置环境变量GOROOT，根据不同的平台设置环境变量的命令是不一样的，如下所示：
 Linux和macOS平台  export GOROOT=/path/to/go  Window平台  setx GOROOT &amp;#34;\path\to\go&amp;#34; 环境变量GOROOT的作用是告诉系统Go语言的安装路径，以便当执行go命令时能够找到可执行性文件。除了要设置GOROOT，还需要设置环境变量GOPATH。Go所提供的工具集依赖于GOPATH，所有源码、三方库以及编译好的程序都会在GOPATH所指定的目录下。假设在macOS运行以下指令：
export GOPATH=$HOME/gocode 那么你的所有源码都需要放在src目录下，因此，你需要在目录$HOME/gocode中创建文件夹src。除了使用src目录放置Go源码，在目录$HOME/gocode中还需要创建目录bin和pkg。此时的目录结构是：
gocode ├─bin ├─pkg └─src bin放置所有可执行性文件；pkg放置Go程序所依赖的3方库；src放置了你即将编写的Go程序。
以上步骤操作完成之后，需要执行以下命令来进一步确保Go运行环境安装正确！
$ go version go version go1.11.5 linux/amd64 选择IDE 在开始编写Go程序之前，需要根据自身的情况来选择IDE。以下是一些常用的IDE，使用这些IDE能够提高编程效率！
 Vim Editor GitHub Atom Microsoft Visual Studio Code  选择IDE之后，需要为其配置调试环境，这里以VS Code为例来配置调试环境，其它IDE也需要配置对应的调试环境。为了能在VS Code里调试Go代码，则需要安装以下插件:
 VSCode-Go plugin  Analysis工具 Delve  安装完成之后需要按照以下方式配置Go-Plugin，其中program填写Go程序所在的目录。
接下来将举2个例子来说明如何调试，其中一个例子是调试Go程序，另外一个例子是调试自动化测试用例。
 如何调试Go程序  // main.</description>
    </item>
    
    <item>
      <title>如何为产品提供可信度较高的运行环境</title>
      <link>https://2cloudlab.com/blog/how-to-test-terraform-code/</link>
      <pubDate>Fri, 15 Nov 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-test-terraform-code/</guid>
      <description>在企业中经常会发生此类事情：临近产品新功能发布的日子，企业上下忙的不可开交，甚至有些研发人员被半夜叫醒解决新功能无法使用的问题，大家急急忙忙将遇到的问题解决了却又引发了其它问题，最终导致产品新功能无法及时发布或者产品运行在一个容易奔溃的环境。这类事件反复发生，使得研发人员害怕产品新功能的每一次发布。这种害怕将导致企业延长新功能的发布周期，本来一周一次的发布计划改成了一个月一次发布。更长的发布周期将会积累和隐藏更多的风险和不确定因素，因此这类事件变得更加常见，问题变得更加糟糕！面对这个问题所带来的挑战，企业需要缩短发布周期来及早暴露和解决问题，而缩短发布周期的关键点在于如何在短时间内发现更多的缺陷！自动化测试是实现这个关键点的因素之一。
自动化测试在产品的研发过程中无处不在。研发团队在研发产品时需要为其编写单元测试；测试团队在测试产品时要为其编写手动测试、集成测试和UI测试；DevOps团队需要为产品的运行环境编写自动化测试用例，确保生成的环境是稳定且支持产品的。为产品研发实施自动化测试的目的在于短时间内发现和解决更多的缺陷，从而增强产品对外发布的信心！本文将通过以下方面来介绍如何对产品的运行环境进行自动化测试，企业可以根据自身情况，引入本文所提到的自动化测试经验来确保产品的运行环境是可信的。
 2cloudlab模块的自动化测试 静态检测Terraform的编码 针对Terraform模块编写单元测试（Unit Test） 针对Terraform模块编写集成测试（Integration Test） 针对Terraform模块编写端到端的测试（End-to-End Test） 为测试环境中的资源定制清除策略 总结  其中单元测试、集成测试和End-to-End测试需要使用Go语言来编写大量测试代码，产品运行环境的质量主要由它们来保证。这些测试的难易程度、数量占比和运行时间由下图所示：
2cloudlab模块的自动化测试 2cloudlab的模块都会包含一些自动化测试用例。每一个Terraform模块都会有对应的测试用例，这些测试用例会放在一个test目录下（目录结构如下所示），每一个测试用例所验证的场景是不同的。由于这些自动化测试用例都是用Go语言来编写的，因此需要使用Go语言的运行时环境来运行。除此之外，为了能够高效地编写自动化测试用例，需要引入第三方工具Terratest，该工具也是基于Go语言来编写的（这篇文章介绍了Go语言的基础知识），它像一把瑞士军刀，提供了大量通用的基础操作。
. |____examples | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____terraform.tfstate | | |____terraform.tfstate.backup | | |____variables.tf |____modules | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf |____test | |____iam_across_account_assistant_test.go | |____README.md 其中test目录下的测试用例iam_across_account_assistant_test.go会调用examples下的手动测试例子来验证目录modules下的Terraform模块iam_across_account_assistant。
2cloudlab根据以上目录结构编写了大量的单元测试以及少量的集成测试。这些测试是遵守了以下原则来编写的:
 每一个测试用例都会基于真实环境来执行 每一个测试用例执行结束后都会销毁已创建的资源 为每一个资源指定一个独立的命名空间，以免发生名称冲突 每一个测试用例都会在独立的临时目录下下运行 为每一个集成测试添加可配置stage步骤 测试用例之间是相互独立且可并发执行  在编写测试用例之前，有一步关键的验证：静态检测。为Terraform模块实施静态检测只需要花费几分钟，但是确能够避免一些常见的错误，接下来让我们从静态检测开始来一步一步提高产品运行环境的稳定性！</description>
    </item>
    
    <item>
      <title>如何正确使用2cloudlab.com的服务</title>
      <link>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</link>
      <pubDate>Tue, 15 Oct 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</guid>
      <description>企业在为软件产品提供运行环境时需要做的事情太多了。这些事情有安装软件、配置软件、创建服务器、准备数据库、监控等等。如果每一件事情都需要手动去完成，那么效率是低下的，而且容易出错！在2cloudlab，我们试图通过自动化的方式处理以上事情。因此2cloudlab提供了各种可重复使用的模块，通过组合这些模块以及依赖计算机执行这些模块来加速产品运行环境的生成！2cloudlab致力于让企业在一天之内创建完整的软件运行环境。
 创建一个完整的产品运行环境的任务列表 如何使用2cloudlab所提供的Terraform模块 如何构建infrastructure_modules 如何构建infrastructure_live 在infrastructure_modules中引用2cloudlab的Terraform模块 在infrastructure_live中引用infrastructure_modules 总结  创建一个完整的产品运行环境所需的任务列表 创建一个完整的产品运行环境需要考虑的事情太多了，这些事情有：
 安装：安装产品以及其依赖项（比如准备操作系统） 配置：为软件提供配置信息，这些信息有端口设置、数据库密码等 创建资源：为软件创建运行环境，这些环境由计算资源、存储资源以及其它资源构成 部署：将软件部署到运行环境，在线更新功能等 高可用性：考虑在多个区域启动相同服务，确保任何一个区域停止工作时，其它区域依然能够提供服务 可扩展：支持横向扩展（增加或减少资源来应对高峰期或低峰期）和纵向扩展（增强资源） 性能：优化产品运行环境的性能，包括CPU、GPU和内存 网络：配置IP、端口、VPN、SSH 安全：增加数据安全（包括传输和存储安全）、网络安全 指标监控：收集有价值的数据，通过KPI的方式呈现出来 日志监控：收集用户日志以及产品运行环境日志 备份和恢复：支持数据备份和恢复，支持运行环境快速恢复 成本优化：降低产品运行环境的使用成本 文档：为产品代码编写文档，为产品编写说明书 测试：编写测试用例、自动化测试、集成测试和产品测试  为产品准备运行环境都会遇到以上问题，企业需要根据实际情况来选择哪些事项是需要实施的，哪些事项当下是不需要实现的。以上事项如果都使用手动的方式来实现，那么结果将会是令人失望的。2cloudlab针对这些事项实现了一个个可复用的模块，用户只需要组合并使用这些模块就能轻松地创建出开箱即用的解决方案。2cloudlab所提供的模块经过大量的测试，并可以帮助企业在一天之内完成环境的准备。接下来让我们看看如何使用2cloudlab所提供的模块。
2cloudlab所提供的Terraform模块 2cloudlab基于Terraform编写了可复用的模块，这些模块主要托管在github上。每个模块的格式如下所示：
. |____examples | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf |____modules | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf |____README.md |____test | |____README.md | |____iam_across_account_assistant_test.go  modules目录下包含了子功能，用户将引用这个目录下的子功能来完成环境的搭建 examples目录下包含了如何使用modules目录下子功能的例子以及对应的说明文档 test目录主要测试了modules目录下的子功能 README.</description>
    </item>
    
    <item>
      <title>企业如何在一天之内部署线上服务--高效使用terraform</title>
      <link>https://2cloudlab.com/blog/how-to-apply-terraform-across-entire-enterprises/</link>
      <pubDate>Mon, 15 Jul 2019 12:29:40 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-apply-terraform-across-entire-enterprises/</guid>
      <description>terraform是一个用go语言编写的跨平台、开源、只有单个运行文件的命令行程序。terraform通过解析和执行terraform configuration文件集合，最终会在短时间内生成分布式软件所运行的环境，避免了手动配置环境，减少出错的可能性。在企业里，要想高效地使用terraform来正确且快速地生成分布式软件所运行的环境，不仅需要掌握terraform知识，还需要结合工程方面的实践经验（比如版本控制，模块划分，测试）以及其它工具（比如Packer、Docker、Kubernetes）来共同实现。
这篇文章将通过以下话题来说明如何在企业中高效使用terraform：
 企业为何使用Terraform？ Terraform的运行机制 如何解决多人同时使用Terraform的问题 在企业中建立Devops团队以及Terraform规范 现实世界中DevOps团队的工作内容 总结  企业为何使用Terraform？ Terraform的主要作用在于基于云服务提供商创建资源和准备运行环境。企业内部需要借助不同工具推行DevOps，Terraform就是其中之一。软件产品或服务都需要运行在一个特定的环境上，因此企业需要为软件准备这些运行环境，而这些运行环境的准备就是需要工具：Terraform。除此之外还有其它工具（比如CloudFormation），企业之所以使用Terraform工具的原因在于：
 拥有强大而且活跃的社区支持、免费和开源 支持大部分云服务提供者（AWS、Azure、GCP以及其它云服务） 只需要一个terraform运行文件和云服务厂商的账号就能在自己的电脑上使用 terraform是基于描述型语言（declarative language）来定义资源的最终状态 terraform支持一致性部署（immutable infrastructure）,每次更新均是可重现且一致的  随着云计算的普及，企业应该使用云计算带来的好处&amp;ndash;降低成本和应用更加先进的技术&amp;ndash;来使自己处于行业领先位置。使用Terraform可以以Infrastructure as Code的方式使用云服务，DevOps人员只需要编写脚本、安装Terraform可执行文件、一个云服务商账号以及执行脚本的一台电脑就能远程为软件创建资源和准备环境。这些脚本文件由版本控制系统进行管理，这样一来软件工程方面的经验便可应用在这些脚本文件上。要想高效使用Terraform，除了要学习Terraform知识，还要解决多人使用的情况。在这之前，以一个简单的示例来了解Terraform的运行机制是一个良好的开端。
Terraform的运行机制 terraform是单文件命令行程序，它基于infrastructure as code方式来运行的，因此需要给terraform提供脚本文件让其运行。脚本文件的后缀是.tf，其中的内容涉及选择云服务提供商、创建何种类型的资源以及定义输入输出变量等等。
在开始运行terraform之前，需要准备以下条件:
 一台笔记本电脑 根据操作系统下载对应的terraform可执行性文件，并把该文件所在位置添加到系统的环境变量中 到AWS注册一个根账号，并用根账号创建一个子账号，这个子账号会被terraform使用 将子账号生成的ID和Key提供给terraform  以上步骤准备好之后，接下来编写以下terraform脚本文件:
# main.tf  terraform { required_version =&amp;#34;&amp;gt;= 0.12, &amp;lt; 0.13&amp;#34; } provider &amp;#34;aws&amp;#34; { region = &amp;#34;us-east-2&amp;#34;# Allow any 2.x version of the AWS provider version = &amp;#34;~&amp;gt; 2.0&amp;#34; } resource &amp;#34;aws_instance&amp;#34; &amp;#34;example&amp;#34; { ami = &amp;#34;ami-0d5d9d301c853a04a&amp;#34; instance_type = &amp;#34;t2.</description>
    </item>
    
    <item>
      <title>企业为何需要在内部推广Devops</title>
      <link>https://2cloudlab.com/blog/devops-cicd-infrastructure-as-code/</link>
      <pubDate>Thu, 21 Feb 2019 12:27:38 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/devops-cicd-infrastructure-as-code/</guid>
      <description>企业对外发布产品之前其在内部需要做好各种准备：研发工程师完成产品研发，测试工程师完成产品测试，DevOps工程师部署产品。在这个过程中遇到任何问题，都会影响产品的发布，因此企业在数字化转型的过程中都需要优化这一流程。在软件行业中，优化这个流程的方法论是：DevOps。
这篇文章接下来将围绕以下内容来介绍DevOps：
 DevOps在企业内部推广的现实状况 对企业有价值的DevOps是什么样的？ 如何理解：Devops、CICD、Infrastructure as code Infrastructure as code的优势 总结  DevOps在企业内部推广的现实状况 DevOps在中国区企业的推广令人堪忧。大多数企业只实现了DevOps的持续集成部分，比如研发人员提交代码会触发服务器自动编译生成软件产品、测试人员的测试脚本会自动执行并验证软件产品的缺陷。很少有企业能够把发布产品这一部分做好，比如DevOps人员运行基础资源脚本来准备环境、部署产品、监控产品、植入安全机制、优化基础资源等。有部分企业甚至都没有这个概念。下面列举了我经历的一些企业遇到的关于DevOps的问题。
 大多数企业都没有一个完整DevOps团队 企业对DevOps的理解是不一样的，最终导致没有统一的DevOps方案 企业对产品发布的认知只是停留在“能用就行”的程度，如何优化、监控、保护基础环境并不重视 云计算的使用经验匮乏 缺乏DevOps的实施经验  没有实施DevOps的企业将面临一个问题：产品无法及时推向市场。
对企业有价值的DevOps是什么样的？ 在企业内部，研发工程师根据产品经理的需求，在自己的电脑上完成编码、测试、Code Review并最终提交代码并完成产品功能的研发。理想情况下，这些功能会第一时间交付到客户，并为其带来价值。DevOps就是为实现这个流程而提出来的。对企业而言，DevOps的价值在于及时为客户输出高质量的产品，最终为客户创造价值。这一简单的目标背后实际上是由一系列相关的活动所支撑的。让我们看看现实世界中，软件从研发到发布所涉及的工作事项。
阶段一：研发团队根据需求研发产品功能，这个过程涉及编码、测试、提交源码；阶段二：测试团队获取研发团队的成果并进行测试，这个过程涉及到准备测试环境、执行各种测试、生成测试报告；阶段三：DevOps团队获取测试团队验证过的产品并发布产品，这个过程涉及到准备运行环境、监测产品运行状态、实施安全机制、优化资源使用情况。
这些工作事项好似被串联到一条流水线上，由不同角色共同在这条流水线上完成产品的研发、测试和交付，最终把产品及时发布到线上，以供客户使用。因此流水线的流畅性决定了企业响应市场的能力，在软件行业中，这条流水线就是业内常说的CICD。企业开始数字化转型时就应该考虑搭建CICD的策略，因为搭建CICD是一个漫长的过程，期间需要不断地迭代，同时也会涉及到多个团队。试想想，如果福特没有汽车生产流水线，那么福特公司也就无法生产大量的汽车了，同样，在软件行业中，CICD也起到了类似的作用，只不过这条虚拟的流水线生成的是高质量的软件产品。
实施CICD的基础是自动化。也就是说企业需要为研发和发布产品引入自动化机制，而Infrastructure as code是实现自动化的一种方式。它要求研发和发布产品过程中所涉及的工作事项要通过代码的方式驱动。计算机只需要执行这些代码就能完成产品的测试和发布，从而实现自动化。
如何理解：Devops、CICD、Infrastructure as code 在软件行业中，Devops, CICD, Infrastructure as code几个词汇经常出现，它们的最终目标是帮助企业提高软件质量同时向市场推出杀手锏产品。以下是来自wiki的定义：
Devops的定义
 DevOps is a set of practices that combines software development (Dev) and information-technology operations (Ops) which aims to shorten the systems development life cycle and provide continuous delivery with high software quality.</description>
    </item>
    
  </channel>
</rss>