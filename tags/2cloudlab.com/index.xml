<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2cloudlab.com on 2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/tags/2cloudlab.com/</link>
    <description>Recent content in 2cloudlab.com on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Feb 2020 12:21:58 +0600</lastBuildDate>
    
	<atom:link href="https://2cloudlab.com/tags/2cloudlab.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>让产品7*24小时持续服务于用户--在线更新产品功能</title>
      <link>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</link>
      <pubDate>Sat, 15 Feb 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</guid>
      <description>当企业对外发布产品的新功能时，如何保证原有的功能不受影响，仅替换需要升级的功能？企业无法接受在线服务暂时性停止对外服务。试想想，几十万用户正在使用某个软件产品，突然因为企业的一次功能升级，导致几十万用户无法正常使用，最终造成企业损失。幸运的是，在软件行业，有几种方案可以解决这类问题。
方案一:blue/green deployment。这种方案的思想是维持2套相似的运行环境，其中一个环境运行当前产品，另外一个环境运行带有新功能的产品，一旦带有新功能的产品能够正常工作了，就将用户流量导入新环境， 并保留原来的环境(以免新环境发生严重问题时，可以及时切换到原来稳定的环境上)。这种方案的好处是实施起来简单，而且可以及时恢复到最新的稳定环境上，但是它增加了成本(需要同时运行2套相似的运行环境)，增加了工作量(需要同时管理2套相似的运行环境)。整个过程如下图所示:
方案二: rolling deployment。这种方案的思想是增量替换，先启动新功能，将流量从原有功能导入到新功能上，保持原有功能，直到新功能正常工作才关闭原有功能。持续以上步骤，直到新功能逐一替换掉原有功能。这种方案的好处是无需维护2套资源，降低成本，但是其缺点是增加了实施的复杂度。除此之外，该方案也有局限性，它适用于由大量微服务组成的分布式系统。整个过程如下图所示:
方案三: canary deployment。这种方案在rolling deployment的基础之上加入了一些特性。比如根据用户的特征(国家、性别、年龄等)来确定一小部分群体，并向该群体发布新功能。这种方案进一步增加了实施的复杂性，好处是对外发布时，其作用的范围，粒度更细了。
每种方案都有适用的场景，因此企业需要根据实际情况选择其中一个来解决在线更新产品功能的问题。</description>
    </item>
    
    <item>
      <title>如何为产品提供可信度较高的运行环境</title>
      <link>https://2cloudlab.com/blog/how-to-test-terraform-code/</link>
      <pubDate>Fri, 15 Nov 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-test-terraform-code/</guid>
      <description>在企业中经常会发生此类事情：临近产品新功能发布的日子，企业上下忙的不可开交，甚至有些研发人员被半夜叫醒解决新功能无法使用的问题，大家急急忙忙将遇到的问题解决了却又引发了其它问题，最终导致产品新功能无法及时发布或者产品运行在一个容易奔溃的环境。这类事件反复发生，使得研发人员害怕产品新功能的每一次发布。这种害怕将导致企业延长新功能的发布周期，本来一周一次的发布计划改成了一个月一次发布。更长的发布周期将会积累和隐藏更多的风险和不确定因素，因此这类事件变得更加常见，问题变得更加糟糕！面对这个问题所带来的挑战，企业需要缩短发布周期来及早暴露和解决问题，而缩短发布周期的关键点在于如何在短时间内发现更多的缺陷！自动化测试是实现这个关键点的因素之一。
自动化测试在产品的研发过程中无处不在。研发团队在研发产品时需要为其编写单元测试；测试团队在测试产品时要为其编写手动测试、集成测试和UI测试；DevOps团队需要为产品的运行环境编写自动化测试用例，确保生成的环境是稳定且支持产品的。为产品研发实施自动化测试的目的在于短时间内发现和解决更多的缺陷，从而增强产品对外发布的信心！本文将通过以下方面来介绍如何对产品的运行环境进行自动化测试，企业可以根据自身情况，引入本文所提到的自动化测试经验来确保产品的运行环境是可信的。
 2cloudlab模块的自动化测试 静态检测Terraform的编码 针对Terraform模块编写单元测试（Unit Test） 针对Terraform模块编写集成测试（Integration Test） 针对Terraform模块编写端到端的测试（End-to-End Test） 为测试环境中的资源定制清除策略 总结  其中单元测试、集成测试和End-to-End测试需要使用Go语言来编写大量测试代码，产品运行环境的质量主要由它们来保证。这些测试的难易程度、数量占比和运行时间由下图所示：
2cloudlab模块的自动化测试 2cloudlab的模块都会包含一些自动化测试用例。每一个Terraform模块都会有对应的测试用例，这些测试用例会放在一个test目录下（目录结构如下所示），每一个测试用例所验证的场景是不同的。由于这些自动化测试用例都是用Go语言来编写的，因此需要使用Go语言的运行时环境来运行。除此之外，为了能够高效地编写自动化测试用例，需要引入第三方工具Terratest，该工具也是基于Go语言来编写的（这篇文章介绍了Go语言的基础知识），它像一把瑞士军刀，提供了大量通用的基础操作。
.|____examples| |____iam_across_account_assistant| | |____main.tf| | |____outputs.tf| | |____README.md| | |____terraform.tfstate| | |____terraform.tfstate.backup| | |____variables.tf|____modules| |____iam_across_account_assistant| | |____main.tf| | |____outputs.tf| | |____README.md| | |____variables.tf|____test| |____iam_across_account_assistant_test.go| |____README.md其中test目录下的测试用例iam_across_account_assistant_test.go会调用examples下的手动测试例子来验证目录modules下的Terraform模块iam_across_account_assistant。
2cloudlab根据以上目录结构编写了大量的单元测试以及少量的集成测试。这些测试是遵守了以下原则来编写的:
 每一个测试用例都会基于真实环境来执行 每一个测试用例执行结束后都会销毁已创建的资源 为每一个资源指定一个独立的命名空间，以免发生名称冲突 每一个测试用例都会在独立的临时目录下下运行 为每一个集成测试添加可配置stage步骤 测试用例之间是相互独立且可并发执行  在编写测试用例之前，有一步关键的验证：静态检测。为Terraform模块实施静态检测只需要花费几分钟，但是确能够避免一些常见的错误，接下来让我们从静态检测开始来一步一步提高产品运行环境的稳定性！</description>
    </item>
    
    <item>
      <title>如何正确使用2cloudlab.com的服务</title>
      <link>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</link>
      <pubDate>Tue, 15 Oct 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</guid>
      <description>企业在为软件产品提供运行环境时需要做的事情太多了。这些事情有安装软件、配置软件、创建服务器、准备数据库、监控等等。如果每一件事情都需要手动去完成，那么效率是低下的，而且容易出错！在2cloudlab，我们试图通过自动化的方式处理以上事情。因此2cloudlab提供了各种可重复使用的模块，通过组合这些模块以及依赖计算机执行这些模块来加速产品运行环境的生成！2cloudlab致力于让企业在一天之内创建完整的软件运行环境。
 创建一个完整的产品运行环境的任务列表 如何使用2cloudlab所提供的Terraform模块 如何构建infrastructure_modules 如何构建infrastructure_live 在infrastructure_modules中引用2cloudlab的Terraform模块 在infrastructure_live中引用infrastructure_modules 总结  创建一个完整的产品运行环境所需的任务列表 创建一个完整的产品运行环境需要考虑的事情太多了，这些事情有：
 安装：安装产品以及其依赖项（比如准备操作系统） 配置：为软件提供配置信息，这些信息有端口设置、数据库密码等 创建资源：为软件创建运行环境，这些环境由计算资源、存储资源以及其它资源构成 部署：将软件部署到运行环境，在线更新功能等 高可用性：考虑在多个区域启动相同服务，确保任何一个区域停止工作时，其它区域依然能够提供服务 可扩展：支持横向扩展（增加或减少资源来应对高峰期或低峰期）和纵向扩展（增强资源） 性能：优化产品运行环境的性能，包括CPU、GPU和内存 网络：配置IP、端口、VPN、SSH 安全：增加数据安全（包括传输和存储安全）、网络安全 指标监控：收集有价值的数据，通过KPI的方式呈现出来 日志监控：收集用户日志以及产品运行环境日志 备份和恢复：支持数据备份和恢复，支持运行环境快速恢复 成本优化：降低产品运行环境的使用成本 文档：为产品代码编写文档，为产品编写说明书 测试：编写测试用例、自动化测试、集成测试和产品测试  为产品准备运行环境都会遇到以上问题，企业需要根据实际情况来选择哪些事项是需要实施的，哪些事项当下是不需要实现的。以上事项如果都使用手动的方式来实现，那么结果将会是令人失望的。2cloudlab针对这些事项实现了一个个可复用的模块，用户只需要组合并使用这些模块就能轻松地创建出开箱即用的解决方案。2cloudlab所提供的模块经过大量的测试，并可以帮助企业在一天之内完成环境的准备。接下来让我们看看如何使用2cloudlab所提供的模块。
2cloudlab所提供的Terraform模块 2cloudlab基于Terraform编写了可复用的模块，这些模块主要托管在github上。每个模块的格式如下所示：
.|____examples| |____iam_across_account_assistant| | |____main.tf| | |____outputs.tf| | |____README.md| | |____variables.tf|____modules| |____iam_across_account_assistant| | |____main.tf| | |____outputs.tf| | |____README.md| | |____variables.tf|____README.md|____test| |____README.md| |____iam_across_account_assistant_test.go modules目录下包含了子功能，用户将引用这个目录下的子功能来完成环境的搭建 examples目录下包含了如何使用modules目录下子功能的例子以及对应的说明文档 test目录主要测试了modules目录下的子功能 README.</description>
    </item>
    
  </channel>
</rss>