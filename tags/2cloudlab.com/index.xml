<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2cloudlab.com on 2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/tags/2cloudlab.com/</link>
    <description>Recent content in 2cloudlab.com on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Feb 2020 12:21:58 +0600</lastBuildDate>
    
	<atom:link href="https://2cloudlab.com/tags/2cloudlab.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>让产品7*24小时持续服务于用户--在线更新产品功能</title>
      <link>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</link>
      <pubDate>Sat, 15 Feb 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</guid>
      <description>当企业对外发布产品的新功能时，如何保证原有的功能不受影响，仅替换需要升级的功能？企业无法接受在线服务暂时性停止对外服务。试想想，几十万用户正在使用某个软件产品，突然因为企业的一次功能升级，导致几十万用户无法正常使用，最终造成企业损失。幸运的是，在软件行业，有几种方案可以解决这类问题。
方案一:blue/green deployment。这种方案的思想是维持2套相似的运行环境，其中一个环境运行当前产品，另外一个环境运行带有新功能的产品，一旦带有新功能的产品能够正常工作了，就将用户流量导入新环境， 并保留原来的环境(以免新环境发生严重问题时，可以及时切换到原来稳定的环境上)。这种方案的好处是实施起来简单，而且可以及时恢复到最新的稳定环境上，但是它增加了成本(需要同时运行2套相似的运行环境)，增加了工作量(需要同时管理2套相似的运行环境)。整个过程如下图所示:
方案二: rolling deployment。这种方案的思想是增量替换，先启动新功能，将流量从原有功能导入到新功能上，保持原有功能，直到新功能正常工作才关闭原有功能。持续以上步骤，直到新功能逐一替换掉原有功能。这种方案的好处是无需维护2套资源，降低成本，但是其缺点是增加了实施的复杂度。除此之外，该方案也有局限性，它适用于由大量微服务组成的分布式系统。整个过程如下图所示:
方案三: canary deployment。这种方案在rolling deployment的基础之上加入了一些特性。比如根据用户的特征(国家、性别、年龄等)来确定一小部分群体，并向该群体发布新功能。这种方案进一步增加了实施的复杂性，好处是对外发布时，其作用的范围，粒度更细了。
每种方案都有适用的场景，因此企业需要根据实际情况选择其中一个来解决在线更新产品功能的问题。</description>
    </item>
    
    <item>
      <title>让产品7*24小时持续服务于用户--如何测试Terraform</title>
      <link>https://2cloudlab.com/blog/how-to-test-terraform-code/</link>
      <pubDate>Fri, 15 Nov 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-test-terraform-code/</guid>
      <description>软件产品研发完成并不能说明可以对外发布。在企业中，经常发生这种情况：软件产品研发完了却没法部署到线上环境，或者，研发团队、测试团队和DevOps团队花了无数个夜晚最终勉强上线了容易奔溃的软件产品。这类问题导致软件产品无法7*24小时全天候为用户服务，最终给企业造成了巨大损失，因此企业需要寻找解决这类问题的方案。
对外发布软件产品的理想情况是这样的：产品经理的一个想法可以一周甚至是一天之内变成线上功能，以便用户及时享用！实现这种情况的基本要素是：自动化测试和增量发布。自动化测试包括软件产品的测试，也包括基础设施代码的测试。当软件产品功能正常时，如何保证其所依赖的运行环境也是正常的？对于这个问题，需要从以下几个方面来解决。
 编写Terraform测试用例 针对Terraform编写单元测试（Unit Test） 针对Terraform编写集成测试（Integration Test） 针对Terraform编写端到端的测试（End-to-End Test） 静态检测Terraform的编码 为测试环境中的资源定制清除策略 总结  编写Terraform测试用例 敬请期待&amp;hellip;
针对Terraform编写单元测试（Unit Test） 敬请期待&amp;hellip;
针对Terraform编写集成测试（Integration Test） 敬请期待&amp;hellip;
针对Terraform编写端到端的测试（End-to-End Test） 敬请期待&amp;hellip;
静态检测Terraform的编码 敬请期待&amp;hellip;
为测试环境中的资源定制清除策略 敬请期待&amp;hellip;
总结 敬请期待&amp;hellip;</description>
    </item>
    
    <item>
      <title>如何快速使用2cloudlab.com的服务</title>
      <link>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</link>
      <pubDate>Tue, 15 Oct 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</guid>
      <description>企业在为软件产品提供运行环境时需要做的事情太多了。这些事情有安装软件、配置软件、创建服务器、准备数据库、监控等等。如果每一件事情都需要手动去完成，那么效率是低下的，而且容易出错！在2cloudlab，我们试图通过自动化的方式处理以上事情。因此2cloudlab提供了各种可重复使用的模块，通过组合这些模块以及依赖计算机执行这些模块来加速产品运行环境的生成！2cloudlab致力于让企业在一天之内创建完整的软件运行环境。
 创建一个完整的产品运行环境的任务列表 如何使用2cloudlab所提供的Terraform模块  创建一个完整的产品运行环境所需的任务列表 创建一个完整的产品运行环境需要考虑的事情太多了，这些事情有：
 安装：安装产品以及其依赖项（比如准备操作系统） 配置：为软件提供配置信息，这些信息有端口设置、数据库密码等 创建资源：为软件创建运行环境，这些环境由计算资源、存储资源以及其它资源构成 部署：将软件部署到运行环境，在线更新功能等 高可用性：考虑在多个区域启动相同服务，确保任何一个区域停止工作时，其它区域依然能够提供服务 可扩展：支持横向扩展（增加或减少资源来应对高峰期或低峰期）和纵向扩展（增强资源） 性能：优化产品运行环境的性能，包括CPU、GPU和内存 网络：配置IP、端口、VPN、SSH 安全：增加数据安全（包括传输和存储安全）、网络安全 指标监控：收集有价值的数据，通过KPI的方式呈现出来 日志监控：收集用户日志以及产品运行环境日志 备份和恢复：支持数据备份和恢复，支持运行环境快速恢复 成本优化：降低产品运行环境的使用成本 文档：为产品代码编写文档，为产品编写说明书 测试：编写测试用例、自动化测试、集成测试和产品测试  为产品准备运行环境都会遇到以上问题，企业需要根据实际情况来选择哪些事项是需要实施的，哪些事项当下是不需要实现的。以上事项如果都使用手动的方式来实现，那么结果将会是令人失望的。2cloudlab针对这些事项实现了一个个可复用的模块，用户只需要组合并使用这些模块就能轻松地创建出开箱即用的解决方案。2cloudlab所提供的模块经过大量的测试，并可以帮助企业在一天之内完成环境的准备。接下来让我们看看如何使用2cloudlab所提供的模块。
如何使用2cloudlab所提供的Terraform模块 2cloudlab基于Terraform编写了可复用的模块，这些模块主要托管在github上。每个模块的格式如下所示：
. |____examples | |____cloudtrail | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf | |____iam_groups | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf | |____iam_policies | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.</description>
    </item>
    
  </channel>
</rss>