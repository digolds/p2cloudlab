<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloudcomputing on 2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/tags/cloudcomputing/</link>
    <description>Recent content in cloudcomputing on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Mar 2020 12:29:40 +0600</lastBuildDate>
    
	<atom:link href="https://2cloudlab.com/tags/cloudcomputing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>提高研发团队使用AWS服务的效率x100--高效使用aws-vault工具</title>
      <link>https://2cloudlab.com/blog/how-to-authority-aws-through-command-line/</link>
      <pubDate>Tue, 10 Mar 2020 12:29:40 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-authority-aws-through-command-line/</guid>
      <description>在DevOps的世界里有太多工具需要掌握，命令行工具就是其中之一。企业在打造DevOps的过程中会经常使用命令行工具访问AWS服务。一名研发人员每天可能要在命令行里反复（平均50次）输入登录AWS的凭证才能创建资源，如果为每一名账号引入安全机制，那么这个登录流程耗时更长！为了减轻这种重复登录所带来的痛苦，则需要一个更加友好的命令行工具来辅助，这个工具就是：aws-vault。
 什么是aws-vault工具 aws-vault工具的使用指南 总结  什么是aws-vault工具 aws-vault是一个命令行工具，这个工具的主要作用在于帮助研发人员以命令行的方式快速访问AWS服务，最终减轻了每一名研发人员因反复登录而带来的负担，从而提高企业整体的研发效率。
aws-vault是一款用go语言编写且开源的命令行工具，其项目地址在这里。aws-vault主要解决安全和自动设置凭证的问题。
初次运行aws-vault时，只需要在命令行里输入如下指令：
aws-vault add slz 根据提示输入AWS_ACCESS_KEY_ID和AWS_SECRET_ACCESS_KEY信息。如果这个凭证具有操作AWS资源的权限，那么研发人员就能通过aws-vault工具高效访问AWS服务。此外，这2个登录信息是以密文的形式存储的，因此aws-vault进一步保护了登录凭证。如果该用户需要使用MFA，那么只需要在文件~/.aws/config加入以下内容：
# config文件 [profile slz] mfa_serial = arn:aws:iam::120699691161:mfa/Tony aws-vault工具会自动到这个文件中读取该MFA地址，并提示研发人员键入6位安全码。如果研发人员需要用到AWs所提供的role，那么也可以按照类似的方式在该文件中添加以下内容：
# config文件 [profile slz] role_arn = arn:aws:iam::120699691161:role/update_role aws-vault工具会自动读取这个role，并自动获取该role所拥有的权限来访问AWS服务。
设置好以上登录凭证之后，研发人员只需要执行以下命令就能自动访问AWS资源:
aws-vault exec slz -- aws iam list-users 以上命令分两部分：aws-vault exec slz和aws iam list-users。前者会根据slz去找到对应的登录凭证，并自动设置好登录凭证，后者则是使用aws命令行工具列出所有用户信息。后半部分可以是支持AWS凭证登录的任何工具(比如：Terraform工具）。如下例子将aws-vault工具和terraform工具结合在一起使用：
aws-vault exec slz -- terraform apply aws-vault工具的使用例子 完成以上配置之后，接下来看看aws-vault工具如何结合terraform工具使用的。
假设我们使用aws-vault添加了以下具有相同登录凭证，但是不同登录方式的登录选择：
 slz：直接通过登录凭证操作AWS服务 slz_mfa：除了需要登录凭证，还需要输入6位安全码才能操作AWS服务 slz_mfa_role：获取临时登录凭证，并以role的方式访问AWS服务  以下命令说明了如何使用aws-vault工具和terraform plan命令生成资源创建的详细信息
aws-vault exec slz -- terraform plan aws-vault exec slz_mfa -- terraform plan aws-vault exec slz_mfa_role -- terraform plan 第一种命令直接通过登录凭证使terraform能够访问AWS服务；第二种命令以第一种类似，但是在执行访问AWS服务之前需要输入6位安全码；第三种的登录凭证使临时生成的，所拥有的权限由role来确定，这个role有可能是其它账号的。</description>
    </item>
    
    <item>
      <title>企业如何在一天之内部署线上服务--高效使用terraform</title>
      <link>https://2cloudlab.com/blog/how-to-apply-terraform-across-entire-enterprises/</link>
      <pubDate>Mon, 15 Jul 2019 12:29:40 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-apply-terraform-across-entire-enterprises/</guid>
      <description>terraform是一个用go语言编写的跨平台、开源、只有单个运行文件的命令行程序。terraform通过解析和执行terraform configuration文件集合，最终会在短时间内生成分布式软件所运行的环境，避免了手动配置环境，减少出错的可能性。在企业里，要想高效地使用terraform来正确且快速地生成分布式软件所运行的环境，不仅需要掌握terraform知识，还需要结合工程方面的实践经验（比如版本控制，模块划分，测试）以及其它工具（比如Packer、Docker、Kubernetes）来共同实现。
这篇文章将通过以下话题来说明如何在企业中高效使用terraform：
 企业为何使用Terraform？ Terraform的运行机制 如何解决多人同时使用Terraform的问题 在企业中建立Devops团队以及Terraform规范 现实世界中DevOps团队的工作内容 总结  企业为何使用Terraform？ Terraform的主要作用在于基于云服务提供商创建资源和准备运行环境。企业内部需要借助不同工具推行DevOps，Terraform就是其中之一。软件产品或服务都需要运行在一个特定的环境上，因此企业需要为软件准备这些运行环境，而这些运行环境的准备就是需要工具：Terraform。除此之外还有其它工具（比如CloudFormation），企业之所以使用Terraform工具的原因在于：
 拥有强大而且活跃的社区支持、免费和开源 支持大部分云服务提供者（AWS、Azure、GCP以及其它云服务） 只需要一个terraform运行文件和云服务厂商的账号就能在自己的电脑上使用 terraform是基于描述型语言（declarative language）来定义资源的最终状态 terraform支持一致性部署（immutable infrastructure）,每次更新均是可重现且一致的  随着云计算的普及，企业应该使用云计算带来的好处&amp;ndash;降低成本和应用更加先进的技术&amp;ndash;来使自己处于行业领先位置。使用Terraform可以以Infrastructure as Code的方式使用云服务，DevOps人员只需要编写脚本、安装Terraform可执行文件、一个云服务商账号以及执行脚本的一台电脑就能远程为软件创建资源和准备环境。这些脚本文件由版本控制系统进行管理，这样一来软件工程方面的经验便可应用在这些脚本文件上。要想高效使用Terraform，除了要学习Terraform知识，还要解决多人使用的情况。在这之前，以一个简单的示例来了解Terraform的运行机制是一个良好的开端。
Terraform的运行机制 terraform是单文件命令行程序，它基于infrastructure as code方式来运行的，因此需要给terraform提供脚本文件让其运行。脚本文件的后缀是.tf，其中的内容涉及选择云服务提供商、创建何种类型的资源以及定义输入输出变量等等。
在开始运行terraform之前，需要准备以下条件:
 一台笔记本电脑 根据操作系统下载对应的terraform可执行性文件，并把该文件所在位置添加到系统的环境变量中 到AWS注册一个根账号，并用根账号创建一个子账号，这个子账号会被terraform使用 将子账号生成的ID和Key提供给terraform  以上步骤准备好之后，接下来编写以下terraform脚本文件:
# main.tf  terraform { required_version =&amp;#34;&amp;gt;= 0.12, &amp;lt; 0.13&amp;#34; } provider &amp;#34;aws&amp;#34; { region = &amp;#34;us-east-2&amp;#34;# Allow any 2.x version of the AWS provider version = &amp;#34;~&amp;gt; 2.0&amp;#34; } resource &amp;#34;aws_instance&amp;#34; &amp;#34;example&amp;#34; { ami = &amp;#34;ami-0d5d9d301c853a04a&amp;#34; instance_type = &amp;#34;t2.</description>
    </item>
    
  </channel>
</rss>