<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on 2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/tags/aws/</link>
    <description>Recent content in AWS on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Mar 2020 12:21:58 +0600</lastBuildDate><atom:link href="https://2cloudlab.com/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何通过命令行访问AWS服务-最佳实践</title>
      <link>https://2cloudlab.com/blog/how-to-authority-aws-service-command-line/</link>
      <pubDate>Sun, 15 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-authority-aws-service-command-line/</guid>
      <description>使用命令行操作AWS服务之前，需要输入登陆凭证。每一个研发人员会经常使用不同账号的登陆凭证来完成他们的工作，比如在测试账号中进行测试工作，在stage账号中部署测试通过的功能等。在现实的工作中，每个研发人员每天平均会操作AWS服务20～50次，而每次都需要给AWS提供登陆凭证。因此为了提高一个团队的研发效率，需要采用一个能够高效访问AWS服务的方法。本文将对比几种方法，并最终给出一个更加有效的方法来访问AWS。
本文将基于以下几种方法来说明如何在类Unix系统上配置和使用登陆凭证：
 将登陆凭证写入配置文件~/.aws/credentials 将登陆凭证写入环境变量AWS_ACCESS_KEY_ID 和 AWS_SECRET_ACCESS_KEY 借助工具aws-valut来设置登陆凭证 总结  将登陆凭证写入配置文件~/.aws/credentials 通过命令行访问AWS服务之前，你需要获得一对登陆凭证，它们的格式如下：
aws_access_key_id=AKIAIOSFODNN7EXAMPLE aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 将以上登陆凭证写入~/.aws/credentials文件中就可以轻松访问AWS服务（内容如下所示）。这种方式的最大问题是不安全，因为该登陆凭证是以明文的方式存放，而且容易被别人获取。
[default] aws_access_key_id=AKIAIOSFODNN7EXAMPLE aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 既然将登陆凭证存放在磁盘上是不合适的，那么可以通过设置环境变量的方式来解决这类安全问题。
将登陆凭证写入环境变量AWS_ACCESS_KEY_ID 和 AWS_SECRET_ACCESS_KEY 为了不存储登陆凭证，则可以通过写入环境变量的方式来访问AWS服务，如下所示（注意export前的空格）：
echo &amp;#34;Note a space before export command, it will not store used commands in commands history.&amp;#34; export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 以上方式只能在当前运行这些命令的命令行中访问AWS服务，如果该命令行关闭，那么这些环境变量需要重新设置。因此这种方式解决了安全的问题，但是确变得麻烦了。比如我需要打开2个命令行窗口来访问不同的AWS账号。
要想高效访问AWS服务，则应该同时解决以上2个问题。幸运的是，我们可以使用工具：aws-vault来协助我们更好地访问AWS服务。
借助工具aws-valut来设置登陆凭证 aws-valut是一个管理登陆凭证的命令行工具（这篇文章进一步介绍了该工具）。这个工具通过以下方式解决了访问AWS时所遇到问题：
 加密存储登陆凭证 一个命令行同时处理多个登陆凭证 支持所有访问AWS的命令行工具  在使用aws-vault之前，需要设置登陆凭证，比如设置以下2个不同账号的登陆凭证：
aws-vault add slz aws-vault add slz_mfa 比如以下命令使用了slz所对应的凭证并运行aws命令行工具
aws-vault exec slz -- aws iam list-users 以下命令使用了slz_mfa所对应的凭证并运行terraform工具
aws-vault exec slz_mfa -- terraform plan slz和slz_mfa所对应的凭证均以密文的方式存储在磁盘上。通过以上对比，读者应该首先考虑使用aws-vault来访问AWS服务，并考虑在命令行之前加入一个空格来避免命令被记录在历史之中，比如以下示例：</description>
    </item>
    
  </channel>
</rss>
