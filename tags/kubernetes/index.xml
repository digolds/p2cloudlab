<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on 2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Mar 2020 12:21:58 +0600</lastBuildDate><atom:link href="https://2cloudlab.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何规模化企业的数字化服务--Kubernetes的最佳实践</title>
      <link>https://2cloudlab.com/blog/how-to-improve-organization-effect-kubernetes/</link>
      <pubDate>Fri, 20 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-improve-organization-effect-kubernetes/</guid>
      <description>企业的线上产品的发展主要分为3个阶段。第一阶段主要是快速打造产品，然后推向市场并验证想法；第二阶段主要是打磨产品同时发展用户基数，使得用户基数达到千万级别；第三阶段则是维护产品，迭代新功能，保证产品能够为企业带来持续的收入。每一个阶段都会有对应的技术手段来支撑，本文的内容主要解决企业在第二阶段所面临的挑战。这些挑战主要有：企业如何在原来的基础上重构数字化产品？企业如何构建支撑千万级用户的数字化产品？对于后者，企业需要综合多种技术手段来实现，其中Kubernetes（K8S）在容器编排方面为拥有千万级别用户群体的服务提供了支持。接下来，让我们看看K8S是如何规模化数字化产品的。
 Kubernetes所解决的问题 什么是Kubernetes(K8S) 为什么选择K8S K8S的组成部分 K8S的资源类型 在AWS上搭建K8S服务的选项  Kubernetes所解决的问题 当一款数字化产品的用户基数非常庞大的时候（比如每天的访问量达到几千万人次时），企业需要升级其技术解决方案，以便能够支撑庞大的用户群体。拥有庞大用户群体的数字化服务有很多，比如Google的搜索引擎，淘宝，微博等等。而这类数字化服务有一个共同的特征：其后台运行着成成千上万台服务器，由它们向用户提供服务。通过人工来管理这群服务器显然不是一个可行的办法，因此Google的工程师为了高效管理这种量级的服务器，发明了这个工具：Kubernetes（K8S）。通过这个工具，工程师只需要键入几条命令就可以同时操作多台机器，从而实现轻松管理成千上万台服务器。
这些数字化产品大多都是微服务化的，而微服务的几大特点就是：服务与服务之间是相互独立的；它们之间是通过行为来交互的；为了高可用性，每一个服务都会被复制到不同的服务器上，当某台服务器坏了或者死机了，那么运行在其它服务器上的服务依然能够提供服务；不同服务互相协作，最终支撑了数字化产品。K8S特别适合微服务场景，比如工程师只需要执行一个命令就能让K8S部署某类服务，并自动替换失败的服务。除此之外，工程师还可以通过一个命令使得K8S自动部署或更新服务，这些服务能够根据负载的多少而自动增加或减少。为了方便K8S部署，其部署单元被抽象出来，而这种单元就是我们常常见到的容器，其中Docker是一款非常流行的容器工具，因此K8S和Docker工具结合很好地支持微服务结构的数字化产品。
使用K8S能够方便地为数字化产品的负载能力提供横向扩展，那么K8S是如何做到的？接下来我们要了解什么是K8S？它提供了哪些功能？
什么是Kubernetes(K8S) Kubernetes (K8S)是一套管理容器资源的开源系统，它提供了以下功能:
 分配资源  它会根据资源的使用情况(这些资源包括数据中心，服务器，CPU，内存，端口等)，在一族服务器上，以最优的方式，创建和运行容器。
 部署  它支持多种在线逐步更新策略，这些策略有rolling deployment， blue-green deployment以及 canary deployment。如果在更新过程中产生错误，它会自动恢复到上一次可用的状态，从而确保服务7*24小时可用。
 自带修复功能  它会一直监控资源的运行状态，自动将可用的资源替换不可使用的资源。
 弹性伸缩  它支持横向和纵向伸缩。负载增多或减少时，它可以自动增加或减少适度的资源来响应负载。它也可以升级或降级资源的处理能力来支持纵向扩展，比如提高CPU的处理能力或者增加内存。
 负载均衡  它能使外部访问内部资源(常见的资源有container)，并将外部请求均匀地分配给不同的资源。
 发现服务  它有内置的DNS服务，并提供Service资源，使得容器能够找到彼此来进行通信。
 配置和授权  它允许你设置不同的环境变量来区分不同的环境，这些环境有stage、test和prod。也允许你为资源设置不同的访问权限。
为什么选择K8S K8S作为容器化应用的编排系统，已经广泛应用于大多数企业。它之所以流行的原因有以下几点：
 丰富的功能  它为管理容器提供了大量功能，这些功能包括弹性伸缩，自动修复，在线部署，服务发现，秘钥管理，配置管理，bin packing, storage orchestration, batch execution, access controls, log aggregation, SSH access, batch processing, and much more.</description>
    </item>
    
  </channel>
</rss>
