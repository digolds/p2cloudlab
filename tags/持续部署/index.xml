<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>持续部署 on 2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/tags/%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</link>
    <description>Recent content in 持续部署 on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Mar 2020 12:21:58 +0600</lastBuildDate>
    
	<atom:link href="https://2cloudlab.com/tags/%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从提出想法-&gt;对外发布产品--如何0成本在github上缩短该过程</title>
      <link>https://2cloudlab.com/blog/how-to-craft-url-shorten-service-for-one-day/</link>
      <pubDate>Thu, 19 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-craft-url-shorten-service-for-one-day/</guid>
      <description>Craft a shorten URL service base on AWS in 1 day With Cloud Computing becoming popular, uniform and standard software development methodologies are arising, meaning that companies can leverage out-of-the-box infrastructures provided by Cloud providers, such as AWS, to craft complex yet competitive software product in order to domain markets in a short time, sometime, even in a day. Here, I will show you how to combine some sort of services provided by AWS, to build a production-grade shorten URL service with high availability, resiliency and maintainability in just one day!</description>
    </item>
    
    <item>
      <title>如何提高企业的研发效率--CI/CD</title>
      <link>https://2cloudlab.com/blog/why-organization-should-practice-cicd/</link>
      <pubDate>Wed, 18 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/why-organization-should-practice-cicd/</guid>
      <description>CI/CD是现代软件研发过程中必不可少的基础设施。类似于福特流水线，它能够帮助企业提高软件的研发效率，提高软件的质量以及对外发布新功能。CI/CD能够帮助企业的研发团队提高研发效率。CI/CD将企业中的所有研发人员，包括研发团队，测试团队，DevOps团队，串联在一起，使得上一个团队的输出都可以顺利地流转到下一个团队。CI/CD能够帮助企业提高软件质量。研发团队借助CI/CD能够快速看到修改产品之后的结果，从而能够及时解决因修改不当而引起的问题；测试团队将UI测试，集成测试接入到CI/CD中，使得软件产品对外发布之前，都有足够的自动化测试来验证其功能。CI/CD能够帮助企业及时对外发布产品的新功能。DevOps团队只需要执行一个命令，就能将研发团队所研发的新功能通过机器自动地部署到生产环境中，有时还能支持线上实时更新！CI/CD分为2部分，它们分别是CI和CD。每个部分都需要借助一些工具和经验来实现，其中&amp;lt;如何0成本在github上构建CI&amp;gt;通过一个例子来构建CI，而本文将围绕CD来展开，包括Continue Test，Continue Monitor，Continue Security，Continue Deployment等。
2cloudlab.com为企业准备产品的运行环境，只需要1天！</description>
    </item>
    
    <item>
      <title>如何0成本在github上构建CI</title>
      <link>https://2cloudlab.com/blog/how-to-setup-ci-service-base-on-github/</link>
      <pubDate>Tue, 17 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-setup-ci-service-base-on-github/</guid>
      <description>现代软件的研发流程基本上均会配备一定程度的CI/CD（这篇文章解释了为何需要在企业里实施CI/CD），整个流程主要分为CI和CD部分，这篇文章将围绕CI部分展开，并通过一个具体的例子解释如何0成本在github上构建CI。构建CI的最佳实践离不开Trunk Based Development的分支策略，感兴趣的读者可以通过这篇文章来了解什么是Trunk Based Development。在github上构建CI有2个好处：无需任何费用和有大量可以用于构建CI的模块，借助这2个好处，小规模团队可以快速地搭建还不错的CI流程。接下来，让我们结合一个使用Go编写的Hello World例子以及基于Trunk-Based Development模式来构建这个CI流程。
这篇文章将分为以下几个部分来讲解：
 在github上构建CI的基本思路 在github上构建CI的优势 通过一个Go示例在github上构建CI 总结  在github上构建CI的基本思路 构建CI有2种方式，一种是组建团队从0开始，另外一种是借助第三方服务开始。在github上构建CI属于后者，其优势在于github提供了许多方便开发者研发的服务，其中有3种服务可用于免费构建CI，它们分别是：免费托管源码，免费存储以及免费构建服务（也就是最近推出的Actions服务）。有了这3种服务，任何一个团队均可以根据自身的情况来构建CI。接下来，我将基于Trunk-Based Development模式提出实践CI的一种方法，这种方法提出了2个独立的流程，并定义了触发这2个流程的条件。
首先，我们需要定义一个流程（master_workflow），这个流程的作用是快速响应master分支上的每一次改动。该分支上每一次改动都会自动启动服务器或虚拟机来执行该流程，并将结果反馈（比如通过邮件通知的方式）给研发团队。这个流程的主要作用在于每天都确保master分支是健康的，比如语法规则是正确的，编译是成功的和单元测试能通过，因此该流程的一大特点是执行周期通常限制在10~30分钟内。这一要求使得构成该流程的步骤尽可能的少，下面是构成该流程的几个步骤：
 准备编译环境 安装依赖库 获取源代码 检测代码的合法性 编译源代码 执行自动化测试（仅仅包括单元测试） 生成测试报告  为了缩短这个流程的执行周期，可以考虑这些方法：将准备编译环境和安装依赖库步骤提前合并成一个步骤（通过Docker技术），无需在运行时准备；将检测代码的合法性和编译源代码步骤分布在不同的机器上同时执行；在执行自动化测试的步骤中并发执行单元测试。缩短这个流程的执行周期是为了让整个团队更快地看到每一次修改的结果，如果这个修改阻碍了团队的工作（比如编译失败了），那么提交该修改的研发工作者能够第一时间修复。
其次，我们还需要定义一个集成流程（integration_workflow），这个流程的作用是将所有组件集成在一个完整的压缩包里，并发布到一个共有的存储空间，以便测试团队和DevOps团队展开后续的测试和部署工作。这个流程不仅包括之前流程所定义的步骤，而且还新增了集成和归档步骤，如下所示：
 准备编译环境 安装依赖库 获取源代码 检测代码的合法性 编译源代码 执行自动化测试（包括单元测试和集成测试） 生成测试报告 集成和归档  **注：**此时，执行自动化测试包括了集成测试。因此，从总体而言，这个流程的运行周期会更长一点，通常在30~60分钟。
以上就是基于Trunk-Based Development模式，在github上构建CI的基本思路。首先，我们需要为master分支定义一个流程，该分支上的每次修改都会触发该流程；其次，我们需要为release分支定义另外一个流程，该分支上的每一次修改都会触发该流程，并将集成包发布到一个共有存储空间。为何需要定义这2个流程，读者可以参考这篇文章。
在github上构建CI的优势 你可以选择组建一支团队来打造CI/CD，这种方式需要自己搭建服务器，安装软件（比如Jenkins）和配置，因此所需时间会较长。另外，你也可以选择第三方服务来搭建CI/CD（比如在github上构建CI）。在github上搭建CI有2个好处，它们分别是免费和共享其他人的成果。
github向开发者提供了3种免费的服务来搭建CI，它们分别是源码托管，归档存储和Actions服务。开发者可以免费地将代码发布到github上，世界各地的开发者可以参与进来共同开发；开发者也可以免费地使用github所提供的Actions服务来构建流程；开发者可以将流程输出的集成包发布到github提供的存储服务里，供用户使用。
这3种服务不仅免费，而且其中Actions服务提供了可复用的模块。这些可复用的模块是由全世界的开发者贡献的，因此可以直接将这些模块组合在一起构成适合自己的CI流程。比如这篇文章的示例使用了Go相关的Actions模块来构建上一节提到的2个流程。
github平台存储了开发者的代码，提供了搭建CI的Action服务，拥有大量可复用的模块以及支持存储，此时，开发者只需要使用这些可复用的模块来定义流程，便可以将代码，Actions服务和存储服务联系在一起。而流程的定义是通过yaml文件来完成的，比如上一节的2个流程就分别对应着文件master_workflow.yaml和integration_workflow.yaml。
组建一个团队来搭建CI，需要准备服务器，安装软件，用网线连接服务器等，而借助github，则只需要编写yaml文件就能快速构建出一个稳定的CI，这种转变大大地缩短了搭建CI的时间，让开发者专注于软件的功能研发！
接下来让我们看一个具体的例子来实践在github上构建CI
通过一个Go示例在github上构建CI 这个例子是由Go语言来编写的，完整的源码可以到这里获取，其目录结构如下所示：
. |____.github | |____workflows | | |____integration_workflow.yaml | | |____master_workflow.yaml |____go.mod |____main.go |____main_integration_test.go |____main_test.go |____Makefile |____mylib | |____external_lib.go | |____external_lib_test.</description>
    </item>
    
  </channel>
</rss>