<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2cloudlab | 企业数字化转型的催化剂</title>
    <link>https://2cloudlab.com/</link>
    <description>Recent content on 2cloudlab | 企业数字化转型的催化剂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Mar 2020 12:21:58 +0600</lastBuildDate>
    
	<atom:link href="https://2cloudlab.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何提高企业的研发效率--Kubernetes的最佳实践</title>
      <link>https://2cloudlab.com/blog/how-to-improve-organization-effect-kubernetes/</link>
      <pubDate>Wed, 18 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-improve-organization-effect-kubernetes/</guid>
      <description>参考  Kubernetes Liveness and Readiness Probes: How to Avoid Shooting Yourself in the Foot  2cloudlab.com为企业准备产品的运行环境，只需要1天！</description>
    </item>
    
    <item>
      <title>如何提高企业的研发效率--CI/CD</title>
      <link>https://2cloudlab.com/blog/why-organization-should-practice-cicd/</link>
      <pubDate>Tue, 17 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/why-organization-should-practice-cicd/</guid>
      <description>软件研发不仅涉及到核心业务的研发，还会涉及到周边的基础设施的搭建。这些基础设施的搭建主要是为了提高软件研发的效率，进而使得企业能够快速向市场推出新功能或新服务。企业的软件研发流程是由多个环节，环环相扣而形成的。因此为了提高企业的研发效率，每一个环节都需要相对应的基础设施来支撑。随着技术的发展，现实世界中的需求越来越复杂，进而催生出了更加复杂的软件系统。为了研发这类复杂的软件系统，软件行业的老兵们提出了软件研发的方法和经验，其中，CI/CD是现在比较流行的一种。</description>
    </item>
    
    <item>
      <title>如何提高企业的研发效率--trunk-based development</title>
      <link>https://2cloudlab.com/blog/why-organization-should-use-trunk-based-development/</link>
      <pubDate>Mon, 16 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/why-organization-should-use-trunk-based-development/</guid>
      <description>企业的研发团队在研发产品功能时通常会选择2种分支管理策略，它们分别是Feature Branches Development和Trunk-based Development。2种分支管理策略都有它们适用的场景，比如在github上研发开源软件时，经常会使用Feature Branches Development模式，而Google，Facebook，LinkedIn，微软常常会使用Trunk-based Development模式。企业在实施CI（持续集成）时通常需要Trunk-based Development方面的实践，原因在于这种模式能够快速输出集成的结果。本文将围绕Trunk-based Development展开，并提供一些可实施该模式的操作步骤。
 什么是Trunk-based Development？ 团队需要掌握哪些技巧来实践Trunk-based Development？ 为Trunk-Based Development配套CI服务 Trunk-Based Development的实施细节 结论和参考  什么是Trunk-based Development？ Trunk-based Development是指：所有研发人员围绕主分支(也就是我们常常见到的master分支)来共同研发，在研发过程中拒绝创建存活时间较长的分支，并使用Feature Toggles和Branch by Abstraction等技术在主分支上逐步发布需要长时间（通常是1周）才能研发完成的功能。官方对Trunk-based Development的概括如下所示：
 A source-control branching model, where developers collaborate on code in a single branch called ‘trunk’ *, resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.</description>
    </item>
    
    <item>
      <title>Terraform、aws-vault和Go实用技巧指南</title>
      <link>https://2cloudlab.com/blog/techniques-for-terraform/</link>
      <pubDate>Sun, 15 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/techniques-for-terraform/</guid>
      <description>Terraform实用技巧 aws-vault实用技巧 Go实用技巧 组合Terraform、aws-vault和Go工具的实用技巧  本文记录了2cloudlab.com在使用Terraform、aws-vault和Go工具所积累的知识和经验。这些知识和经验是在解决某些问题的时候发现的，如果能够将这些知识和经验汇总，也许能够帮助到其他团队。
Terraform实用技巧  aws_launch_configuration资源是无法通过API来修改的  一个aws_launch_configuration实例创建之后，要想修改该实例的属性，则需要重新创建一个新的aws_launch_configuration实例，原因在于aws_launch_configuration类型的实例是无法通过AWS所提供的API来修改的。
Terraform所提供的所有类别的资源都有一个lifecycle的设置  Terraform工具通过这个设置来决定创建资源的行为。比如以下代码通过设置create_before_destroy = true，最终能够使得Terraform先创建一个aws_launch_configuration新的实例，再将新实例替换掉旧实例，替换成功后再销毁旧实例。lifecycle中的设置只能是常量，因此这种方式：create_before_destroy = var.flag来设置create_before_destroy是不允许的。
resource &amp;#34;aws_launch_configuration&amp;#34; &amp;#34;launch_configuration_instance&amp;#34; { image_id = &amp;#34;ami-0fc20dd1da406780b&amp;#34;#ubuntu 18.4 instance_type = &amp;#34;t2.micro&amp;#34; security_groups = [aws_security_group.instance.id] user_data = &amp;lt;&amp;lt;-EOF#!/bin/bash  echo &amp;#34;Hello, 2cloudlab.com&amp;#34; &amp;gt; index.html nohup busybox httpd -f -p ${var.server_port} &amp;amp; EOF# Required when using a launch configuration with an auto scaling group. # https://www.terraform.io/docs/providers/aws/r/launch_configuration.html  lifecycle { create_before_destroy = true } } Go实用技巧  如何使用Go来运行某一个测试用例（比如定义了一个TestIntegrationOrganization测试用例）？  go test -v -run TestIntegrationOrganization 如何根据tag(+build integration)来执行一组测试用例？  // intergration_test.</description>
    </item>
    
    <item>
      <title>如何通过命令行访问AWS服务-最佳实践</title>
      <link>https://2cloudlab.com/blog/how-to-authority-aws-service-command-line/</link>
      <pubDate>Sun, 15 Mar 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-authority-aws-service-command-line/</guid>
      <description>使用命令行操作AWS服务之前，需要输入登陆凭证。每一个研发人员会经常使用不同账号的登陆凭证来完成他们的工作，比如在测试账号中进行测试工作，在stage账号中部署测试通过的功能等。在现实的工作中，每个研发人员每天平均会操作AWS服务20～50次，而每次都需要给AWS提供登陆凭证。因此为了提高一个团队的研发效率，需要采用一个能够高效访问AWS服务的方法。本文将对比几种方法，并最终给出一个更加有效的方法来访问AWS。
本文将基于以下几种方法来说明如何在类Unix系统上配置和使用登陆凭证：
 将登陆凭证写入配置文件~/.aws/credentials 将登陆凭证写入环境变量AWS_ACCESS_KEY_ID 和 AWS_SECRET_ACCESS_KEY 借助工具aws-valut来设置登陆凭证 总结  将登陆凭证写入配置文件~/.aws/credentials 通过命令行访问AWS服务之前，你需要获得一对登陆凭证，它们的格式如下：
aws_access_key_id=AKIAIOSFODNN7EXAMPLE aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 将以上登陆凭证写入~/.aws/credentials文件中就可以轻松访问AWS服务（内容如下所示）。这种方式的最大问题是不安全，因为该登陆凭证是以明文的方式存放，而且容易被别人获取。
[default] aws_access_key_id=AKIAIOSFODNN7EXAMPLE aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 既然将登陆凭证存放在磁盘上是不合适的，那么可以通过设置环境变量的方式来解决这类安全问题。
将登陆凭证写入环境变量AWS_ACCESS_KEY_ID 和 AWS_SECRET_ACCESS_KEY 为了不存储登陆凭证，则可以通过写入环境变量的方式来访问AWS服务，如下所示（注意export前的空格）：
echo &amp;#34;Note a space before export command, it will not store used commands in commands history.&amp;#34; export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY 以上方式只能在当前运行这些命令的命令行中访问AWS服务，如果该命令行关闭，那么这些环境变量需要重新设置。因此这种方式解决了安全的问题，但是确变得麻烦了。比如我需要打开2个命令行窗口来访问不同的AWS账号。
要想高效访问AWS服务，则应该同时解决以上2个问题。幸运的是，我们可以使用工具：aws-vault来协助我们更好地访问AWS服务。
借助工具aws-valut来设置登陆凭证 aws-valut是一个管理登陆凭证的命令行工具（这篇文章进一步介绍了该工具）。这个工具通过以下方式解决了访问AWS时所遇到问题：
 加密存储登陆凭证 一个命令行同时处理多个登陆凭证 支持所有访问AWS的命令行工具  在使用aws-vault之前，需要设置登陆凭证，比如设置以下2个不同账号的登陆凭证：
aws-vault add slz aws-vault add slz_mfa 比如以下命令使用了slz所对应的凭证并运行aws命令行工具
aws-vault exec slz -- aws iam list-users 以下命令使用了slz_mfa所对应的凭证并运行terraform工具
aws-vault exec slz_mfa -- terraform plan slz和slz_mfa所对应的凭证均以密文的方式存储在磁盘上。通过以上对比，读者应该首先考虑使用aws-vault来访问AWS服务，并考虑在命令行之前加入一个空格来避免命令被记录在历史之中，比如以下示例：</description>
    </item>
    
    <item>
      <title>提高研发团队使用AWS服务的效率x100--高效使用aws-vault工具</title>
      <link>https://2cloudlab.com/blog/how-to-authority-aws-through-command-line/</link>
      <pubDate>Tue, 10 Mar 2020 12:29:40 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-authority-aws-through-command-line/</guid>
      <description>在DevOps的世界里有太多工具需要掌握，命令行工具就是其中之一。企业在打造DevOps的过程中会经常使用命令行工具访问AWS服务。一名研发人员每天可能要在命令行里反复（平均50~60次）输入登录AWS的凭证才能创建资源，如果为每一名账号引入安全机制，那么这个登录流程耗时更长！为了减轻这种重复登录所带来的痛苦，则需要一个更加友好的命令行工具来辅助，这个工具就是：aws-vault。
 什么是aws-vault工具 aws-vault工具的使用指南 总结  什么是aws-vault工具 aws-vault是一个命令行工具，这个工具的主要作用在于帮助研发人员以命令行的方式快速访问AWS服务，最终减轻了每一名研发人员因反复登录而带来的负担，从而提高企业整体的研发效率。
aws-vault是一款用go语言编写且开源的命令行工具，其项目地址在这里。aws-vault主要解决安全和自动设置凭证的问题。
初次运行aws-vault时，只需要在命令行里输入如下指令：
aws-vault add slz 根据提示输入AWS_ACCESS_KEY_ID和AWS_SECRET_ACCESS_KEY信息。如果这个凭证具有操作AWS资源的权限，那么研发人员就能通过aws-vault工具高效访问AWS服务。此外，这2个登录信息是以密文的形式存储的，因此aws-vault进一步保护了登录凭证。如果该用户需要使用MFA，那么只需要在文件~/.aws/config加入以下内容：
# config文件 [profile slz] mfa_serial = arn:aws:iam::120699691161:mfa/Tony aws-vault工具会自动到这个文件中读取该MFA地址，并提示研发人员键入6位安全码。如果研发人员需要用到AWS所提供的role，那么也可以按照类似的方式在该文件中添加以下内容：
# config文件 [profile slz] role_arn = arn:aws:iam::120699691161:role/update_role aws-vault工具会自动读取这个role，并自动获取该role所拥有的权限来访问AWS服务。
设置好以上登录凭证之后，研发人员只需要执行以下命令就能自动访问AWS资源:
aws-vault exec slz -- aws iam list-users 以上命令分两部分：aws-vault exec slz和aws iam list-users。前者会根据slz去找到对应的登录凭证，并自动设置好登录凭证，后者则是使用aws命令行工具列出所有用户信息。后半部分可以是支持AWS凭证登录的任何工具(比如：Terraform工具）。如下例子将aws-vault工具和terraform工具结合在一起使用：
aws-vault exec slz -- terraform apply aws-vault工具的使用指南 完成以上配置之后，接下来看看aws-vault工具如何结合terraform工具使用的。
假设我们使用aws-vault添加了以下具有相同登录凭证，但是不同登录方式的登录选择：
 slz：直接通过登录凭证操作AWS服务 slz_mfa：除了需要登录凭证，还需要输入6位安全码才能操作AWS服务 slz_mfa_role：获取临时登录凭证，并以role的方式访问AWS服务  以下命令说明了如何使用aws-vault工具和terraform plan命令生成资源创建的详细信息:
 以下命令直接通过登录凭证使terraform能够访问AWS服务  aws-vault exec slz -- terraform plan 以下命令与第一种类似，但是在执行访问AWS服务之前需要输入6位安全码  aws-vault exec slz_mfa -- terraform plan 以下命令的登录凭证是临时生成的，所拥有的权限由role来确定，这个role有可能是其它账号的。  aws-vault exec slz_mfa_role -- terraform plan 通过以上命令，研发人员可以快速切换登录场景，并且只需要一行命令就能操作AWS服务。因此对于拥有上百人的研发团队而言，这种便捷能够以100x的系数来提高团队的工作效率！</description>
    </item>
    
    <item>
      <title>让产品7*24小时持续服务于用户--在线更新产品功能</title>
      <link>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</link>
      <pubDate>Sat, 15 Feb 2020 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-rolling-deploy-online/</guid>
      <description>当企业对外发布产品的新功能时，如何保证原有的功能不受影响，仅替换需要升级的功能？企业无法接受在线服务暂时性停止对外服务。试想想，几十万用户正在使用某个软件产品，突然因为企业的一次功能升级，导致几十万用户无法正常使用，最终造成企业损失。幸运的是，在软件行业，有几种方案可以解决这类问题。
方案一:blue/green deployment。这种方案的思想是维持2套相似的运行环境，其中一个环境运行当前产品，另外一个环境运行带有新功能的产品，一旦带有新功能的产品能够正常工作了，就将用户流量导入新环境， 并保留原来的环境(以免新环境发生严重问题时，可以及时切换到原来稳定的环境上)。这种方案的好处是实施起来简单，而且可以及时恢复到最新的稳定环境上，但是它增加了成本(需要同时运行2套相似的运行环境)，增加了工作量(需要同时管理2套相似的运行环境)。整个过程如下图所示:
方案二: rolling deployment。这种方案的思想是增量替换，先启动新功能，将流量从原有功能导入到新功能上，保持原有功能，直到新功能正常工作才关闭原有功能。持续以上步骤，直到新功能逐一替换掉原有功能。这种方案的好处是无需维护2套资源，降低成本，但是其缺点是增加了实施的复杂度。除此之外，该方案也有局限性，它适用于由大量微服务组成的分布式系统。整个过程如下图所示:
方案三: canary deployment。这种方案在rolling deployment的基础之上加入了一些特性。比如根据用户的特征(国家、性别、年龄等)来确定一小部分群体，并向该群体发布新功能。这种方案进一步增加了实施的复杂性，好处是对外发布时，其作用的范围，粒度更细了。
每种方案都有适用的场景，因此企业需要根据实际情况选择其中一个来解决在线更新产品功能的问题。</description>
    </item>
    
    <item>
      <title>Go编程的奇幻之旅（一）基础知识</title>
      <link>https://2cloudlab.com/blog/how-to-use-go-to-develop-part1/</link>
      <pubDate>Sun, 15 Dec 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-use-go-to-develop-part1/</guid>
      <description>本文将指导你如何准备Go研发环境以及介绍一些基础语法知识。这些内容能够帮助你快速地在企业中应用Go语言所带来的好处。这些好处有：跨平台、丰富的三方库、并发和内置自动化测试功能。本文将按照以下几个方面来介绍Go：
 下载和安装Go 选择IDE Go常用的命令 Go的内置类型 流程控制 并发 错误处理 结构化数据的转化 导入第三方模块 总结  下载和安装Go 在使用Go编程时，首先需要下载和安装Go研发环境。读者可以到其官方网站下载。下载完成之后是安装Go研发环境，假设安装路径为/path/to/go。
安装完成之后需要配置环境变量GOROOT，根据不同的平台设置环境变量的命令是不一样的，如下所示：
 Linux和macOS平台  export GOROOT=/path/to/go  Window平台  setx GOROOT &amp;#34;\path\to\go&amp;#34; 环境变量GOROOT的作用是告诉系统Go语言的安装路径，以便当执行go命令时能够找到可执行性文件。除了要设置GOROOT，还需要设置环境变量GOPATH。Go所提供的工具集依赖于GOPATH，所有源码、三方库以及编译好的程序都会在GOPATH所指定的目录下。假设在macOS运行以下指令：
export GOPATH=$HOME/gocode 那么你的所有源码都需要放在src目录下，因此，你需要在目录$HOME/gocode中创建文件夹src。除了使用src目录放置Go源码，在目录$HOME/gocode中还需要创建目录bin和pkg。此时的目录结构是：
gocode ├─bin ├─pkg └─src bin放置所有可执行性文件；pkg放置Go程序所依赖的3方库；src放置了你即将编写的Go程序。
以上步骤操作完成之后，需要执行以下命令来进一步确保Go运行环境安装正确！
$ go version go version go1.11.5 linux/amd64 选择IDE 在开始编写Go程序之前，需要根据自身的情况来选择IDE。以下是一些常用的IDE，使用这些IDE能够提高编程效率！
 Vim Editor GitHub Atom Microsoft Visual Studio Code  选择IDE之后，需要为其配置调试环境，这里以VS Code为例来配置调试环境，其它IDE也需要配置对应的调试环境。为了能在VS Code里调试Go代码，则需要安装以下插件:
 VSCode-Go plugin  Analysis工具 Delve  安装完成之后需要按照以下方式配置Go-Plugin，其中program填写Go程序所在的目录。
接下来将举2个例子来说明如何调试，其中一个例子是调试Go程序，另外一个例子是调试自动化测试用例。
 如何调试Go程序  // main.</description>
    </item>
    
    <item>
      <title>如何为产品提供可信度较高的运行环境</title>
      <link>https://2cloudlab.com/blog/how-to-test-terraform-code/</link>
      <pubDate>Fri, 15 Nov 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-test-terraform-code/</guid>
      <description>在企业中经常会发生此类事情：临近产品新功能发布的日子，企业上下忙的不可开交，甚至有些研发人员被半夜叫醒解决新功能无法使用的问题，大家急急忙忙将遇到的问题解决了却又引发了其它问题，最终导致产品新功能无法及时发布或者产品运行在一个容易奔溃的环境。这类事件反复发生，使得研发人员害怕产品新功能的每一次发布。这种害怕将导致企业延长新功能的发布周期，本来一周一次的发布计划改成了一个月一次发布。更长的发布周期将会积累和隐藏更多的风险和不确定因素，因此这类事件变得更加常见，问题变得更加糟糕！面对这个问题所带来的挑战，企业需要缩短发布周期来及早暴露和解决问题，而缩短发布周期的关键点在于如何在短时间内发现更多的缺陷！自动化测试是实现这个关键点的因素之一。
自动化测试在产品的研发过程中无处不在。研发团队在研发产品时需要为其编写单元测试；测试团队在测试产品时要为其编写手动测试、集成测试和UI测试；DevOps团队需要为产品的运行环境编写自动化测试用例，确保生成的环境是稳定且支持产品的。为产品研发实施自动化测试的目的在于短时间内发现和解决更多的缺陷，从而增强产品对外发布的信心！本文将通过以下方面来介绍如何对产品的运行环境进行自动化测试，企业可以根据自身情况，引入本文所提到的自动化测试经验来确保产品的运行环境是可信的。
 2cloudlab模块的自动化测试 静态检测Terraform的编码 针对Terraform模块编写单元测试（Unit Test） 针对Terraform模块编写集成测试（Integration Test） 针对Terraform模块编写端到端的测试（End-to-End Test） 为测试环境中的资源定制清除策略 总结  其中单元测试、集成测试和End-to-End测试需要使用Go语言来编写大量测试代码，产品运行环境的质量主要由它们来保证。这些测试的难易程度、数量占比和运行时间由下图所示：
2cloudlab模块的自动化测试 2cloudlab的模块都会包含一些自动化测试用例。每一个Terraform模块都会有对应的测试用例，这些测试用例会放在一个test目录下（目录结构如下所示），每一个测试用例所验证的场景是不同的。由于这些自动化测试用例都是用Go语言来编写的，因此需要使用Go语言的运行时环境来运行。除此之外，为了能够高效地编写自动化测试用例，需要引入第三方工具Terratest，该工具也是基于Go语言来编写的（这篇文章介绍了Go语言的基础知识），它像一把瑞士军刀，提供了大量通用的基础操作。
. |____examples | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____terraform.tfstate | | |____terraform.tfstate.backup | | |____variables.tf |____modules | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf |____test | |____iam_across_account_assistant_test.go | |____README.md 其中test目录下的测试用例iam_across_account_assistant_test.go会调用examples下的手动测试例子来验证目录modules下的Terraform模块iam_across_account_assistant。
2cloudlab根据以上目录结构编写了大量的单元测试以及少量的集成测试。这些测试是遵守了以下原则来编写的:
 每一个测试用例都会基于真实环境来执行 每一个测试用例执行结束后都会销毁已创建的资源 为每一个资源指定一个独立的命名空间，以免发生名称冲突 每一个测试用例都会在独立的临时目录下下运行 为每一个集成测试添加可配置stage步骤 测试用例之间是相互独立且可并发执行  在编写测试用例之前，有一步关键的验证：静态检测。为Terraform模块实施静态检测只需要花费几分钟，但是确能够避免一些常见的错误，接下来让我们从静态检测开始来一步一步提高产品运行环境的稳定性！</description>
    </item>
    
    <item>
      <title>如何正确使用2cloudlab.com的服务</title>
      <link>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</link>
      <pubDate>Tue, 15 Oct 2019 12:21:58 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-use-2cloudlab-services/</guid>
      <description>企业在为软件产品提供运行环境时需要做的事情太多了。这些事情有安装软件、配置软件、创建服务器、准备数据库、监控等等。如果每一件事情都需要手动去完成，那么效率是低下的，而且容易出错！在2cloudlab，我们试图通过自动化的方式处理以上事情。因此2cloudlab提供了各种可重复使用的模块，通过组合这些模块以及依赖计算机执行这些模块来加速产品运行环境的生成！2cloudlab致力于让企业在一天之内创建完整的软件运行环境。
 创建一个完整的产品运行环境的任务列表 如何使用2cloudlab所提供的Terraform模块 如何构建infrastructure_modules 如何构建infrastructure_live 在infrastructure_modules中引用2cloudlab的Terraform模块 在infrastructure_live中引用infrastructure_modules 总结  创建一个完整的产品运行环境所需的任务列表 创建一个完整的产品运行环境需要考虑的事情太多了，这些事情有：
 安装：安装产品以及其依赖项（比如准备操作系统） 配置：为软件提供配置信息，这些信息有端口设置、数据库密码等 创建资源：为软件创建运行环境，这些环境由计算资源、存储资源以及其它资源构成 部署：将软件部署到运行环境，在线更新功能等 高可用性：考虑在多个区域启动相同服务，确保任何一个区域停止工作时，其它区域依然能够提供服务 可扩展：支持横向扩展（增加或减少资源来应对高峰期或低峰期）和纵向扩展（增强资源） 性能：优化产品运行环境的性能，包括CPU、GPU和内存 网络：配置IP、端口、VPN、SSH 安全：增加数据安全（包括传输和存储安全）、网络安全 指标监控：收集有价值的数据，通过KPI的方式呈现出来 日志监控：收集用户日志以及产品运行环境日志 备份和恢复：支持数据备份和恢复，支持运行环境快速恢复 成本优化：降低产品运行环境的使用成本 文档：为产品代码编写文档，为产品编写说明书 测试：编写测试用例、自动化测试、集成测试和产品测试  为产品准备运行环境都会遇到以上问题，企业需要根据实际情况来选择哪些事项是需要实施的，哪些事项当下是不需要实现的。以上事项如果都使用手动的方式来实现，那么结果将会是令人失望的。2cloudlab针对这些事项实现了一个个可复用的模块，用户只需要组合并使用这些模块就能轻松地创建出开箱即用的解决方案。2cloudlab所提供的模块经过大量的测试，并可以帮助企业在一天之内完成环境的准备。接下来让我们看看如何使用2cloudlab所提供的模块。
2cloudlab所提供的Terraform模块 2cloudlab基于Terraform编写了可复用的模块，这些模块主要托管在github上。每个模块的格式如下所示：
. |____examples | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf |____modules | |____iam_across_account_assistant | | |____main.tf | | |____outputs.tf | | |____README.md | | |____variables.tf |____README.md |____test | |____README.md | |____iam_across_account_assistant_test.go  modules目录下包含了子功能，用户将引用这个目录下的子功能来完成环境的搭建 examples目录下包含了如何使用modules目录下子功能的例子以及对应的说明文档 test目录主要测试了modules目录下的子功能 README.</description>
    </item>
    
    <item>
      <title>企业如何在一天之内部署线上服务--高效使用terraform</title>
      <link>https://2cloudlab.com/blog/how-to-apply-terraform-across-entire-enterprises/</link>
      <pubDate>Mon, 15 Jul 2019 12:29:40 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/how-to-apply-terraform-across-entire-enterprises/</guid>
      <description>terraform是一个用go语言编写的跨平台、开源、只有单个运行文件的命令行程序。terraform通过解析和执行terraform configuration文件集合，最终会在短时间内生成分布式软件所运行的环境，避免了手动配置环境，减少出错的可能性。在企业里，要想高效地使用terraform来正确且快速地生成分布式软件所运行的环境，不仅需要掌握terraform知识，还需要结合工程方面的实践经验（比如版本控制，模块划分，测试）以及其它工具（比如Packer、Docker、Kubernetes）来共同实现。
这篇文章将通过以下话题来说明如何在企业中高效使用terraform：
 企业为何使用Terraform？ Terraform的运行机制 如何解决多人同时使用Terraform的问题 在企业中建立Devops团队以及Terraform规范 现实世界中DevOps团队的工作内容 总结  企业为何使用Terraform？ Terraform的主要作用在于基于云服务提供商创建资源和准备运行环境。企业内部需要借助不同工具推行DevOps，Terraform就是其中之一。软件产品或服务都需要运行在一个特定的环境上，因此企业需要为软件准备这些运行环境，而这些运行环境的准备就是需要工具：Terraform。除此之外还有其它工具（比如CloudFormation），企业之所以使用Terraform工具的原因在于：
 拥有强大而且活跃的社区支持、免费和开源 支持大部分云服务提供者（AWS、Azure、GCP以及其它云服务） 只需要一个terraform运行文件和云服务厂商的账号就能在自己的电脑上使用 terraform是基于描述型语言（declarative language）来定义资源的最终状态 terraform支持一致性部署（immutable infrastructure）,每次更新均是可重现且一致的  随着云计算的普及，企业应该使用云计算带来的好处&amp;ndash;降低成本和应用更加先进的技术&amp;ndash;来使自己处于行业领先位置。使用Terraform可以以Infrastructure as Code的方式使用云服务，DevOps人员只需要编写脚本、安装Terraform可执行文件、一个云服务商账号以及执行脚本的一台电脑就能远程为软件创建资源和准备环境。这些脚本文件由版本控制系统进行管理，这样一来软件工程方面的经验便可应用在这些脚本文件上。要想高效使用Terraform，除了要学习Terraform知识，还要解决多人使用的情况。在这之前，以一个简单的示例来了解Terraform的运行机制是一个良好的开端。
Terraform的运行机制 terraform是单文件命令行程序，它基于infrastructure as code方式来运行的，因此需要给terraform提供脚本文件让其运行。脚本文件的后缀是.tf，其中的内容涉及选择云服务提供商、创建何种类型的资源以及定义输入输出变量等等。
在开始运行terraform之前，需要准备以下条件:
 一台笔记本电脑 根据操作系统下载对应的terraform可执行性文件，并把该文件所在位置添加到系统的环境变量中 到AWS注册一个根账号，并用根账号创建一个子账号，这个子账号会被terraform使用 将子账号生成的ID和Key提供给terraform  以上步骤准备好之后，接下来编写以下terraform脚本文件:
# main.tf  terraform { required_version =&amp;#34;&amp;gt;= 0.12, &amp;lt; 0.13&amp;#34; } provider &amp;#34;aws&amp;#34; { region = &amp;#34;us-east-2&amp;#34;# Allow any 2.x version of the AWS provider version = &amp;#34;~&amp;gt; 2.0&amp;#34; } resource &amp;#34;aws_instance&amp;#34; &amp;#34;example&amp;#34; { ami = &amp;#34;ami-0d5d9d301c853a04a&amp;#34; instance_type = &amp;#34;t2.</description>
    </item>
    
    <item>
      <title>如何构建企业级AWS账号体系</title>
      <link>https://2cloudlab.com/portfolio/how-to-construct-enterprise-accounts/</link>
      <pubDate>Fri, 12 Jul 2019 16:58:55 +0600</pubDate>
      
      <guid>https://2cloudlab.com/portfolio/how-to-construct-enterprise-accounts/</guid>
      <description>当使用AWS作为基础服务为分布式软件产品提供资源时，需要做的事情太多了。有时需要查看使用AWS服务的费用、有时需要在dev环境中测试研发的功能、有时需要在stage环境中模拟prod环境的运行情况、有时需要在prod环境中上线新功能。如果研发团队里有100人都能对AWS进行各种个样的操作，那么后果是非常混乱不堪的：比如，有些成员的操作导致prod环境奔溃了、有些成员完成测试时忘记销毁资源最终导致费用变高、甚至没有察觉外来攻击者使用了企业的AWS资源等。为了杜绝这些情况发生，企业在使用AWS服务之前，需要为研发团队构建一套有效的AWS账号体系。本文将围绕如何构建企业级AWS账号体系展开，最终提供一套可实施的方案。
 为何构建企业级AWS账号体系 构建企业级AWS账号体系的基本思想 一天之内构建企业级AWS账号体系的操作指南  为何构建企业级AWS账号体系 使用AWS服务前，我们需要到AWS官网注册一个账号。通过这个账号就可以使用AWS提供的各种服务，比如：EC2、S3、CloudWatch等。由于一个研发团队由多人组成，因此需要为每一个团队成员准备一个AWS账号。为了能够有效地管理这些账号，此时需要构建一个账号体系，这个账号体系的作用如下：
 隔离  使用不同的AWS账号能够将不同的环境（dev、stage、prod）独立开来，以免任何一个环境出问题了不会影响其它环境。隔离不同的环境能够带来这些好处：外来攻击者登陆到了stage环境，而prod环境依然得到了保护；研发人员修改stage环境，prod环境的依然正常工作。
安全  构建有效的账户体系能够统一管理用户。管理员能够轻松地在一个集中的地方为所有用户启动密码策略（比如密码的长度、密码组成的字符类型等）、MFA认证（比如短信或邮箱校验码通知）、定期修改密码等。除此之外，研发人员的权限控制粒度更细了。比如管理员可以方便地为研发人员赋予某个环境下某些具体的权限。
记录与报告  一个有效的账户体系能够记录所有人员的操作历史。在一个有效的账户体系下，任何用户的任何操作都会留下记录，并统一存储在一个集中的地方。除此之外，如果有外来者入侵，那么他们的操作和行踪也会被记录下来，以便查明漏洞。使用AWS服务会产生费用，那么一个有效的账户体系能够集中生成各个环境的费用情况，包括每个环境的各个资源的细节，避免了漏算的情况。
以上提到的好处是建立在一个有效的账号体系下的。要想更加顺利地研发产品的前提是：建立一个有效的账号体系。接下来，让我们看看一个企业级AWS账号体系应该是怎样的。
构建企业级AWS账号体系的基本思想 构建AWS账号体系能够带来诸多好处，因此企业在研发初期就应该构建这种账号体系。构建一个有效的AWS账号体系的方案有很多，接下来本文将提出一个可实施并且简单的企业级AWS账号体系解决方案，其设计思路如下图所示：
上图的账号体系是分步构建的，每一步基本上围绕Users、Groups、Role以及Policy展开。这些组件（Users、Groups、Role以及Policy）是由AWS的IAM（Identity and Access Management）服务提供的，用户可以基于IAM服务来构建安全的用户访问机制。通过手动方式来创建企业级AWS账号体系无疑是具有挑战的，这种方式不仅容易出错，而且时间漫长，因此需要一种自动化的方式来解决这些挑战。2cloudlab所提供的across_account_assistant模块能够帮助企业快速且正确地构建企业级AWS账号体系。接下来让我们看看每一步所涉及的具体内容。
 创建root账号，并用root用户登陆  在开始使用AWS服务的时候，需要使用邮箱来注册一个账号，这个账号就是上图最上面的root账号。使用root账号登陆的用户就是root用户，这个用户能够做任何事情（包括删除用户、创建各种资源、创建子账号等等）。创建root账号的作用主要有以下2方面：
 创建其它子账号，这些子账号里的Users能够创建和使用云资源；创建组以及每组成员（full_access和billing） 统一管理所有子账号使用云服务而产生的费用。  因此root用户需要创建2组人员：一组是管理人员（组名为full_access），他们负责创建和管理子账号；另外一组是财务人员(组名为billing)，他们负责管理费用。创建组的同时，需要指定哪些用户属于哪个组，这些操作步骤可以通过点击AWS的UI页面完成，但是这种手动方式容易出错而且十分耗时，因此推荐使用2cloudlab所提供的across_account_assistant模块来创建（最多需要一天就能建立完整的企业级AWS账号体系）。为了使billing组的用户能够访问账单相关的页面，需要root用户主动启动IAM访问账单的设置，具体设置如下（点击用户名，选择&amp;quot;My Account&amp;rdquo;，滑动到以下内容，将“Activate IAM Access”勾选并点击“Update”）：
在创建组full_access和billing以及对应的成员之后，需要降低入侵root账号的风险。具体的操作方式为：为root用户开启MFA验证，其不能用于研发并需要安全放置，只允许少部分人知道，删除所有root用户相关的命令行方式登陆凭证，定期更换密码。从此之后退出root账号，转而用full_access的成员登陆并用于后续操作。
使用full_access的成员登陆AWS之后，首先要做的事情是：创建cloud trail服务（推荐使用2cloudlab所提供的模块来创建），该服务是为了跟踪所有用户使用资源的情况，以便出问题的时候可以根据这些跟踪的信息定位问题发生的原因。其次需要创建organization服务，并使用organization服务创建security、dev、stage、prod和shared-service子账号。每一个子账号都有对应的邮箱，这个邮箱所对应的用户就是该子账号下的root用户。为了登陆这些子账号，需要重制每个子账号下root用户的密码。重制完成之后，需要登陆到各个子账号完成后续的构建。
注：root账号和root用户是不同的概念。每个账号下可以有多个用户，包括root用户，具有相同权限的用户可以分在同一组。企业只有一个root账号，而且不同企业需要根据自己的实际情况创建对应的子账号，以上给出的例子适用于大多数中小型企业。对于大型企业，则需要考虑在organization服务下创建Unit，每一个Unit对应一个事业部，需要重复创建以上子账号。
以root用户的方式登陆security账号  在security账号下，主要创建管理组(full_access)和其它组（across_account_dev_*、across_account_stage_*等）。管理组的主要作用在于管理security账号，只允许一部分人加入这个组；其它组的作用在于允许其成员访问其它子账号(比如dev、stage和prod)。企业应该根据实际情况来建立其它组，常见的划分依据有根据职能来划分。比如：across_account_dev_developers_access、across_account_dev_testers_access的组成员能够分别以研发和测试权限访问dev子账号。所有用户都会创建在security账号中，这种方式统一了用户管理。其它子账号则只需要建立对应的role就能够被security账号下有权限的用户访问。
security账号下的所有用户都不会在该账号下创建资源，反而会通过其它子账号中role来在其它子账号（dev、stage、prod）创建资源。建立其它组的时候需要用到其它子账号（dev、statge和prod）的role arn，因此需要在其它子账号中创建对应的role，并将role arn提供给其它组。接下来是stage账号的构建。
以root用户的方式登陆stage账号  stage账号中不存在用户，只有role，这些role根据角色来确定权限（比如：可以为研发人员创建这个role：allow_dev_access_from_other_account，该role允许来自其它账号的用户在stage账号中创建一小部分资源）。其它子账号（dev和prod）也只能创建role，并通过role授权给其它账号（比如security）的用户。因此，构建dev和prod账号的过程与构建stage账号的具体过程是一致的。其中要注意的是，dev、stage、prod这些子账号是不允许创建分组和用户的。在stage子账号中创建role的过程主要分以下3步：
 为role选择一个名字，并创建role 为该role指定trusted policy，该policy的作用是指定能够使用该role的其它账号（比如security账号，通过12位的ID来识别） 为该role指定permission policy，该policy的作用是限制这个role能够在stage账号中使用哪类资源以及对其所执行的操作  为了在其它子账号中使用stage子账号中创建的role，则需要在其它账号中授予用户权限（比如在security子账号中为across_account_dev_developers_access赋予访问allow_dev_access_from_other_account的权限，这一步通过为across_account_dev_developers_access指定inline policy完成）。
在stage账号中创建其它role的过程类似，为了一次性完成stage账号中所有role的创建，推荐使用2cloudlab所提供的across_account_assistant模块来辅助。dev、prod、shared-service等账号也需要按照类似的方式创建对应的role。
当完成对所有子账号的构建之后，需要将root用户的登陆方式限制，只允许其通过网站的方式登陆子账号，并且将所有命令行登陆的凭证删除。
在root账号中创建CloudTrail服务  到目前为止，你已经在root、security、dev、stage、prod、shared-service和test账号中创建了对应的IAM user、IAM group、IAM role和IAM policy。研发人员便可以使用自己的账号登陆AWS服务，并根据自己拥有的权限创建对应的资源。为了能记录每一位用户使用AWS服务的情况，则需要创建CloudTrail服务。该服务可以记录每一名用户使用AWS服务的踪迹，并将这些信息归档到AWS的S3服务。开启cloudtrail的好处是：可以及时通过归档的记录来调查外来入侵者的踪迹，从而修复安全漏洞。
 在security账号中创建CloudTrail服务</description>
    </item>
    
    <item>
      <title>企业为何需要在内部推广Devops</title>
      <link>https://2cloudlab.com/blog/devops-cicd-infrastructure-as-code/</link>
      <pubDate>Thu, 21 Feb 2019 12:27:38 +0600</pubDate>
      
      <guid>https://2cloudlab.com/blog/devops-cicd-infrastructure-as-code/</guid>
      <description>企业对外发布产品之前其在内部需要做好各种准备：研发工程师完成产品研发，测试工程师完成产品测试，DevOps工程师部署产品。在这个过程中遇到任何问题，都会影响产品的发布，因此企业在数字化转型的过程中都需要优化这一流程。在软件行业中，优化这个流程的方法论是：DevOps。
这篇文章接下来将围绕以下内容来介绍DevOps：
 DevOps在企业内部推广的现实状况 对企业有价值的DevOps是什么样的？ 如何理解：Devops、CICD、Infrastructure as code Infrastructure as code的优势 总结  DevOps在企业内部推广的现实状况 DevOps在中国区企业的推广令人堪忧。大多数企业只实现了DevOps的持续集成部分，比如研发人员提交代码会触发服务器自动编译生成软件产品、测试人员的测试脚本会自动执行并验证软件产品的缺陷。很少有企业能够把发布产品这一部分做好，比如DevOps人员运行基础资源脚本来准备环境、部署产品、监控产品、植入安全机制、优化基础资源等。有部分企业甚至都没有这个概念。下面列举了我经历的一些企业遇到的关于DevOps的问题。
 大多数企业都没有一个完整DevOps团队 企业对DevOps的理解是不一样的，最终导致没有统一的DevOps方案 企业对产品发布的认知只是停留在“能用就行”的程度，如何优化、监控、保护基础环境并不重视 云计算的使用经验匮乏 缺乏DevOps的实施经验  没有实施DevOps的企业将面临一个问题：产品无法及时推向市场。
对企业有价值的DevOps是什么样的？ 在企业内部，研发工程师根据产品经理的需求，在自己的电脑上完成编码、测试、Code Review并最终提交代码并完成产品功能的研发。理想情况下，这些功能会第一时间交付到客户，并为其带来价值。DevOps就是为实现这个流程而提出来的。对企业而言，DevOps的价值在于及时为客户输出高质量的产品，最终为客户创造价值。这一简单的目标背后实际上是由一系列相关的活动所支撑的。让我们看看现实世界中，软件从研发到发布所涉及的工作事项。
阶段一：研发团队根据需求研发产品功能，这个过程涉及编码、测试、提交源码；阶段二：测试团队获取研发团队的成果并进行测试，这个过程涉及到准备测试环境、执行各种测试、生成测试报告；阶段三：DevOps团队获取测试团队验证过的产品并发布产品，这个过程涉及到准备运行环境、监测产品运行状态、实施安全机制、优化资源使用情况。
这些工作事项好似被串联到一条流水线上，由不同角色共同在这条流水线上完成产品的研发、测试和交付，最终把产品及时发布到线上，以供客户使用。因此流水线的流畅性决定了企业响应市场的能力，在软件行业中，这条流水线就是业内常说的CICD。企业开始数字化转型时就应该考虑搭建CICD的策略，因为搭建CICD是一个漫长的过程，期间需要不断地迭代，同时也会涉及到多个团队。试想想，如果福特没有汽车生产流水线，那么福特公司也就无法生产大量的汽车了，同样，在软件行业中，CICD也起到了类似的作用，只不过这条虚拟的流水线生成的是高质量的软件产品。
实施CICD的基础是自动化。也就是说企业需要为研发和发布产品引入自动化机制，而Infrastructure as code是实现自动化的一种方式。它要求研发和发布产品过程中所涉及的工作事项要通过代码的方式驱动。计算机只需要执行这些代码就能完成产品的测试和发布，从而实现自动化。
如何理解：Devops、CICD、Infrastructure as code 在软件行业中，Devops, CICD, Infrastructure as code几个词汇经常出现，它们的最终目标是帮助企业提高软件质量同时向市场推出杀手锏产品。以下是来自wiki的定义：
Devops的定义
 DevOps is a set of practices that combines software development (Dev) and information-technology operations (Ops) which aims to shorten the systems development life cycle and provide continuous delivery with high software quality.</description>
    </item>
    
    <item>
      <title>如何使用Infrastructure as Code可复用库</title>
      <link>https://2cloudlab.com/portfolio/caramel-bottle/</link>
      <pubDate>Thu, 12 Jul 2018 16:59:54 +0600</pubDate>
      
      <guid>https://2cloudlab.com/portfolio/caramel-bottle/</guid>
      <description>Consectur in Bibendum Totam rem aperiam eaque ipsa quae illo inventore veritatis et quasi architebetea.vitae dicta sunt explicabo. nemo enim ipsam volup as tatem quia voluptassit aspernatur.aut odit aut fugit sed quia consequuntur magni dolores eo ratione voluptatem.sequi nesciunt neque porro quisquam est dolorem ipsum quia dolor amet consectetur adipisci velit. lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</description>
    </item>
    
    <item>
      <title>如何构建企业级VPC</title>
      <link>https://2cloudlab.com/portfolio/makeup-element/</link>
      <pubDate>Thu, 12 Jul 2018 16:57:54 +0600</pubDate>
      
      <guid>https://2cloudlab.com/portfolio/makeup-element/</guid>
      <description>Consectur in Bibendum Totam rem aperiam eaque ipsa quae illo inventore veritatis et quasi architebetea.vitae dicta sunt explicabo. nemo enim ipsam volup as tatem quia voluptassit aspernatur.aut odit aut fugit sed quia consequuntur magni dolores eo ratione voluptatem.sequi nesciunt neque porro quisquam est dolorem ipsum quia dolor amet consectetur adipisci velit. lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</description>
    </item>
    
    <item>
      <title>如何构建Kubernetes cluster</title>
      <link>https://2cloudlab.com/portfolio/table-design/</link>
      <pubDate>Thu, 12 Jul 2018 16:56:54 +0600</pubDate>
      
      <guid>https://2cloudlab.com/portfolio/table-design/</guid>
      <description>Consectur in Bibendum Totam rem aperiam eaque ipsa quae illo inventore veritatis et quasi architebetea.vitae dicta sunt explicabo. nemo enim ipsam volup as tatem quia voluptassit aspernatur.aut odit aut fugit sed quia consequuntur magni dolores eo ratione voluptatem.sequi nesciunt neque porro quisquam est dolorem ipsum quia dolor amet consectetur adipisci velit. lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</description>
    </item>
    
    <item>
      <title>如何设计企业级应用环境</title>
      <link>https://2cloudlab.com/portfolio/bottle-mockup/</link>
      <pubDate>Thu, 12 Jul 2018 16:54:54 +0600</pubDate>
      
      <guid>https://2cloudlab.com/portfolio/bottle-mockup/</guid>
      <description>Consectur in Bibendum Totam rem aperiam eaque ipsa quae illo inventore veritatis et quasi architebetea.vitae dicta sunt explicabo. nemo enim ipsam volup as tatem quia voluptassit aspernatur.aut odit aut fugit sed quia consequuntur magni dolores eo ratione voluptatem.sequi nesciunt neque porro quisquam est dolorem ipsum quia dolor amet consectetur adipisci velit. lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</description>
    </item>
    
    <item>
      <title>Dew Drop</title>
      <link>https://2cloudlab.com/portfolio/dew-drop/</link>
      <pubDate>Thu, 12 Jul 2018 16:53:54 +0600</pubDate>
      
      <guid>https://2cloudlab.com/portfolio/dew-drop/</guid>
      <description>Consectur in Bibendum Totam rem aperiam eaque ipsa quae illo inventore veritatis et quasi architebetea.vitae dicta sunt explicabo. nemo enim ipsam volup as tatem quia voluptassit aspernatur.aut odit aut fugit sed quia consequuntur magni dolores eo ratione voluptatem.sequi nesciunt neque porro quisquam est dolorem ipsum quia dolor amet consectetur adipisci velit. lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</description>
    </item>
    
  </channel>
</rss>